#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef NAVERADSSERVICES_SWIFT_H
#define NAVERADSSERVICES_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import StoreKit;
@import UIKit;
@import WebKit;
#endif

#import <NaverAdsServices/NaverAdsServices.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NaverAdsServices",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
typedef SWIFT_ENUM(NSInteger, GFPAlignmentCenter, open) {
  GFPAlignmentCenterVertical = 0,
  GFPAlignmentCenterHorizontal = 1,
};

@class NSString;
@class NSBundle;

SWIFT_CLASS("_TtC16NaverAdsServices14GFPBundleUtils")
@interface GFPBundleUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GFPBundleUtils * _Nonnull sharedInstance;)
+ (GFPBundleUtils * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appVersion;)
+ (NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull appName;)
+ (NSString * _Nonnull)appName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull identifier;)
+ (NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)skAdNetworkList SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setup;
+ (BOOL)isExistImageWithBundle:(NSBundle * _Nullable)bundle name:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, GFPCellularType, open) {
  GFPCellularTypeUnknown = 0,
  GFPCellularTypeG2 = 1,
  GFPCellularTypeG3 = 2,
  GFPCellularTypeG4 = 3,
  GFPCellularTypeG5 = 4,
};

@class GFPUADeviceInfo;
@class GFPServiceInfo;

SWIFT_CLASS("_TtC16NaverAdsServices13GFPDeviceInfo")
@interface GFPDeviceInfo : NSObject
@property (nonatomic, strong) GFPUADeviceInfo * _Nonnull uaInfo;
@property (nonatomic, strong) GFPServiceInfo * _Nonnull serviceInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull systemName;
@property (nonatomic, readonly, copy) NSString * _Nonnull systemVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceType;
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceModel;
@property (nonatomic, readonly, copy) NSString * _Nonnull bundleIdentifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull appName;
@property (nonatomic, readonly, copy) NSString * _Nonnull appVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull sdkName;
@property (nonatomic, readonly, copy) NSString * _Nonnull os;
@property (nonatomic, readonly, copy) NSString * _Nonnull density;
@property (nonatomic, readonly, copy) NSString * _Nonnull screenWidth;
@property (nonatomic, readonly, copy) NSString * _Nonnull screenHeight;
@property (nonatomic, readonly, copy) NSString * _Nullable locale;
@property (nonatomic, readonly, copy) NSString * _Nonnull networkType;
- (nonnull instancetype)init:(NSString * _Nonnull)version;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull dict;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull initializeDict;
@end


SWIFT_CLASS("_TtC16NaverAdsServices16GFPDeviceLocInfo")
@interface GFPDeviceLocInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull latitude;
@property (nonatomic, copy) NSString * _Nonnull longitude;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices14GFPDeviceUtils")
@interface GFPDeviceUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable preferredLanguageCode;)
+ (NSString * _Nullable)preferredLanguageCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable getDeviceCountryCode;)
+ (NSString * _Nullable)getDeviceCountryCode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable localeIdentifier;)
+ (NSString * _Nullable)localeIdentifier SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isStatusBarLandscape;)
+ (BOOL)isStatusBarLandscape SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isIPad;)
+ (BOOL)isIPad SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull systemName;)
+ (NSString * _Nonnull)systemName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull systemVer;)
+ (NSString * _Nonnull)systemVer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull deviceModel;)
+ (NSString * _Nonnull)deviceModel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGRect screenRect;)
+ (CGRect)screenRect SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat nativeScaleFactor;)
+ (CGFloat)nativeScaleFactor SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isSKAdNetworkAvaliable;)
+ (BOOL)isSKAdNetworkAvaliable SWIFT_WARN_UNUSED_RESULT;
+ (GFPDeviceLocInfo * _Nullable)getLocationInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;
@class UIImage;
@class NSData;
@class NSError;

SWIFT_CLASS("_TtC16NaverAdsServices16GFPDownloadCache")
@interface GFPDownloadCache : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GFPDownloadCache * _Nonnull sharedInstance;)
+ (GFPDownloadCache * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSURL * _Nullable)urlToNSURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isInvalidURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)updateDataWithURL:(NSURL * _Nonnull)url;
- (UIImage * _Nullable)imageWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)dataWithURL:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(NSData * _Nullable, NSURL * _Nullable, NSError * _Nullable))completion;
- (void)dataWithURL:(NSURL * _Nonnull)url timeoutInterval:(NSTimeInterval)timeoutInterval completion:(void (^ _Nonnull)(NSData * _Nullable, NSURL * _Nullable, NSError * _Nullable))completion;
- (void)imageWithURL:(NSURL * _Nonnull)url completion:(void (^ _Nonnull)(UIImage * _Nullable, NSError * _Nullable))completion;
- (void)imageWithURL:(NSURL * _Nonnull)url fullCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSURL * _Nullable, NSError * _Nullable))fullCompletion;
- (void)imageWithURL:(NSURL * _Nonnull)url timeoutInterval:(NSTimeInterval)timeoutInterval fullCompletion:(void (^ _Nonnull)(UIImage * _Nullable, NSURL * _Nullable, NSError * _Nullable))fullCompletion;
- (void)imageWithURL:(NSURL * _Nonnull)url timeoutInterval:(NSTimeInterval)timeoutInterval completion:(void (^ _Nonnull)(UIImage * _Nullable, NSURL * _Nullable, NSError * _Nullable))completion;
- (void)clearCache;
@end

@protocol GFPErrorCodeProviderDelegate;
@class NSCoder;

SWIFT_CLASS("_TtC16NaverAdsServices8GFPError")
@interface GFPError : NSError
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorMessageKey;)
+ (NSString * _Nonnull)errorMessageKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, weak) id <GFPErrorCodeProviderDelegate> _Nullable delegate;)
+ (id <GFPErrorCodeProviderDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
+ (void)setDelegate:(id <GFPErrorCodeProviderDelegate> _Nullable)value;
- (nonnull instancetype)initWithCode:(NSInteger)code;
- (nonnull instancetype)initWithCode:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)userInfo;
+ (GFPError * _Nonnull)errorWithCode:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)codeName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP16NaverAdsServices28GFPErrorCodeProviderDelegate_")
@protocol GFPErrorCodeProviderDelegate
- (NSDictionary<NSNumber *, NSString *> * _Nonnull)errorCodeNameDict SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)errorMessageKey SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, GFPExtensionCreativeType, open) {
  GFPExtensionCreativeTypeNone = 0,
  GFPExtensionCreativeTypeNonLinear = 1,
  GFPExtensionCreativeTypeLoudness = 2,
};

typedef SWIFT_ENUM(NSInteger, GFPHexCodeType, open) {
  GFPHexCodeTypeRgba = 0,
  GFPHexCodeTypeArgb = 1,
};


SWIFT_CLASS_NAMED("GFPLog")
@interface GFPLog : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GFPLog * _Nonnull sharedInstance;)
+ (GFPLog * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic) GFPLogLevel logLevel;
@property (nonatomic, readonly) BOOL hasLogLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull logLevelDesc;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull logIdentifier;)
+ (NSString * _Nonnull)logIdentifier SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)logLevelDescWith:(GFPLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)logMessage:(id _Nonnull)message method:(id _Nonnull)method logLevel:(GFPLogLevel)logLevel debugMode:(BOOL)debugMode;
@end



SWIFT_CLASS("_TtC16NaverAdsServices13GFPMergeUtils")
@interface GFPMergeUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (NSArray * _Nonnull)mergeWithArray1:(NSArray * _Nonnull)array1 array2:(NSArray * _Nonnull)array2 SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)mergeWithDict1:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)dict1 dict2:(NSDictionary<NSString *, NSArray<NSString *> *> * _Nonnull)dict2 SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, GFPNASLoudnessMode, open) {
  GFPNASLoudnessModeGaudio = 0,
  GFPNASLoudnessModeTransparent = 1,
};


SWIFT_CLASS("_TtC16NaverAdsServices27GFPNASLoudnessNormalization")
@interface GFPNASLoudnessNormalization : NSObject
@property (nonatomic) BOOL enabled;
@property (nonatomic, copy) NSString * _Nonnull version;
@property (nonatomic, copy) NSString * _Nonnull contentType;
@property (nonatomic, copy) NSString * _Nonnull contentEncoding;
@property (nonatomic, copy) NSString * _Nonnull dataString;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull referDict;
- (nullable instancetype)initWithLoudnessDict:(NSDictionary<NSString *, NSString *> * _Nullable)loudnessDict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices24GFPNASLoudnessProperties")
@interface GFPNASLoudnessProperties : NSObject
@property (nonatomic) float targetLoudness;
@property (nonatomic) enum GFPNASLoudnessMode mode;
- (nonnull instancetype)initWithPropertyDict:(NSDictionary<NSString *, NSString *> * _Nonnull)propertyDict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastStaticResource;
@class GFPVastAdParameters;
@class GFPVastImpression;
@class GFPVastTracking;
@class GFPVastTrackingInfo;
@protocol NASVastMacroDataSource;

/// Represents a parsed <code><Companion></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices21GFPNASVastCompanionAd")
@interface GFPNASVastCompanionAd : NSObject
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPVastStaticResource *> * _Nonnull staticResources;
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull iframeResources;
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull htmlResources;
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastAdParameters * _Nullable adParameters;
/// The AltText element is used to provide a description of the companion creative when an ad
/// viewer mouses over the ad.
/// @sub-element
/// @optional
@property (nonatomic, copy) NSString * _Nullable altText;
/// Most companion creative can provide a clickthrough of their own, but in the case where the
/// creative cannot provide a clickthrough, such as with a simple static image, the
/// CompanionClickThrough element can be used to provide the clickthrough.
/// A clickthrough may need to be provided for an InLine ad in the following situations:
/// <ul>
///   <li>
///     Static image file
///   </li>
///   <li>
///     Any static resource file where the media player handles the click, such as when
///     playerHandles=true in a VPAID AdClickThru event.
///     @sub-element
///     @optional
///   </li>
/// </ul>
@property (nonatomic, copy) NSString * _Nullable companionClickThrough;
/// When the companion ad creative handles the clickthrough in an InLine ad, the
/// CompanionClickTracking element is used to track the click, provided the ad has a way to
/// notify the player that that ad was clicked, such as when using a VPAID ad unit. The
/// CompanionClickTracking element is also used in Wrappers to track clicks that occur for the
/// Companion creative in the InLine ad that is returned after one or more wrappers.
/// CompanionClickTracking might be used for an InLine ad when:
/// <ul>
///   <li>
///     Any static resource file where the media player handles the click, such as when
///     “playerHandles=true” in a VPAID AdClickThru event
///     CompanionClickTracking is used in a Wrapper in the following situations:
///   </li>
///   <li>
///     Static image file. Any static resource file where the media player handles the click,
///     such as when “playerHandlesClick=true” in VPAID
///   </li>
///   <li>
///     Any static resource file where the media player handles the click, such as when
///     “playerHandlesClick=true” in VPAID
///     @sub-element
///     @optional
///   </li>
/// </ul>
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nonnull companionClickTrackings;
/// The <TrackingEvents> element is available for Linear, NonLinear, and Companion,
/// elements in both InLine and Wrapper formats. When the media player detects that a
/// specified event occurs, the media player is required to trigger the tracking resource URI
/// provided in the nested <Tracking> element. When the server receives this request, it
/// records the event and the time it occurred.
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPVastTracking *> * _Nonnull trackingEvents;
/// The pixel width of the placement slot for which the creative is intended.
/// @attributes
/// @required
@property (nonatomic) float width;
/// The pixel height of the placement slot for which the creative is intended
/// @attributes
/// @required
@property (nonatomic) float height;
/// An optional identifier for the creative.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable id;
/// The pixel width of the creative.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable assetWidth;
/// The pixel height of the creative.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable assetHeight;
/// The maximum pixel width of the creative in its expanded state.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable expandedWidth;
/// The maximum pixel height of the creative in its expanded state.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable expandedHeight;
/// The API necessary to communicate with the creative if available.
/// Used to identify desired placement on a publisher’s page. Values to be used should be
/// discussed between publishers and advertisers.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable apiFramework;
/// Used to identify desired placement on a publisher’s page. Values to be used should be
/// discussed between publishers and advertisers.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable adSlotId;
/// The pixel ratio for which the companion creative is intended. The pixel ratio is the
/// ratio of physical pixels on the device to the device-independent pixels. An ad intended
/// for display on a device with a pixel ratio that is twice that of a standard 1:1 pixel ratio
/// would use the value “2.” Default value is “1.”
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable pxratio;
@property (nonatomic, readonly, copy) NSString * _Nullable renderingModeType;
@property (nonatomic, strong) GFPVastTrackingInfo * _Nullable vastTrackingInfo;
- (BOOL)setUpVastCompanionTrackingInfoWithDataSource:(id <NASVastMacroDataSource> _Nullable)dataSource error:(NSError * _Nullable * _Nullable)error;
- (float)getBestScoreWithContainerSize:(CGSize)containerSize SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastIcon;
@class GFPVastAdSkipInfo;
enum GFPVastIconType : NSInteger;

SWIFT_CLASS("_TtC16NaverAdsServices21GFPNASVastControlInfo")
@interface GFPNASVastControlInfo : NSObject
@property (nonatomic) BOOL isSkippable;
@property (nonatomic) NSTimeInterval skipOffset;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSArray<GFPVastIcon *> * _Nonnull iconList;
- (nonnull instancetype)initWithSkipOffset:(NSString * _Nonnull)skipOffset duration:(NSTimeInterval)duration skipInfo:(GFPVastAdSkipInfo * _Nullable)skipInfo iconList:(NSArray<GFPVastIcon *> * _Nonnull)iconList OBJC_DESIGNATED_INITIALIZER;
/// <ul>
///   <li>
///     (Icon *)providerIcon;
///   </li>
///   <li>
///     (Icon *)postAdAlertIcon;
///   </li>
///   <li>
///     (Icon *)adChoiceIcon;
///   </li>
///   <li>
///     (NSArray <Icon *> *)keywordIcons;
///   </li>
/// </ul>
- (GFPVastIcon * _Nullable)adChoiceIcon SWIFT_WARN_UNUSED_RESULT;
- (GFPVastIcon * _Nullable)providerIcon SWIFT_WARN_UNUSED_RESULT;
- (GFPVastIcon * _Nullable)postAdAlertIcon SWIFT_WARN_UNUSED_RESULT;
- (BOOL)canShowWithIconType:(enum GFPVastIconType)iconType currentTime:(NSTimeInterval)currentTime SWIFT_WARN_UNUSED_RESULT;
- (BOOL)canShowKeywords:(NSTimeInterval)currentTime SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices21GFPNasNonLinearRemind")
@interface GFPNasNonLinearRemind : NSObject
@property (nonatomic, copy) NSString * _Nonnull targetID;
@property (nonatomic) NSInteger offset;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic) BOOL isplayOnce;
- (nullable instancetype)initWithNonLinearDict:(NSDictionary<NSString *, NSString *> * _Nullable)nonLinearDict OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, GFPNetworkType, open) {
  GFPNetworkTypeUnknown = 0,
  GFPNetworkTypeEthernet = 1,
  GFPNetworkTypeWifi = 2,
  GFPNetworkTypeCellular = 3,
};


SWIFT_CLASS("_TtC16NaverAdsServices15GFPNetworkUtils")
@interface GFPNetworkUtils : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GFPNetworkUtils * _Nonnull sharedInstance;)
+ (GFPNetworkUtils * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSDictionary<NSString *, NSNumber *> * _Nullable info;
@property (nonatomic, readonly) enum GFPNetworkType networkType;
@property (nonatomic, readonly) enum GFPCellularType cellularType;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isWIFI;)
+ (BOOL)isWIFI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull networkTypeDescForInit;)
+ (NSString * _Nonnull)networkTypeDescForInit SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull networkTypeDescForAdcall;)
+ (NSString * _Nonnull)networkTypeDescForAdcall SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, GFPOriginType, open) {
  GFPOriginTypeX = 0,
  GFPOriginTypeY = 1,
};


SWIFT_CLASS("_TtC16NaverAdsServices24GFPProgressTrackingEvent")
@interface GFPProgressTrackingEvent : NSObject
@property (nonatomic) NSTimeInterval progressSeconds;
@property (nonatomic, copy) NSString * _Nonnull eventURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices12GFPRectUtils")
@interface GFPRectUtils : NSObject
+ (BOOL)isContainsNaN:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16NaverAdsServices14GFPServiceInfo")
@interface GFPServiceInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull appName;
@property (nonatomic, copy) NSString * _Nonnull appVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (GFPServiceInfo * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull dict;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull appVersionDict;
@end

typedef SWIFT_ENUM(NSInteger, GFPSizeType, open) {
  GFPSizeTypeHeight = 0,
  GFPSizeTypeWidth = 1,
};


SWIFT_CLASS("_TtC16NaverAdsServices12GFPSizeUtils")
@interface GFPSizeUtils : NSObject
+ (BOOL)isSquareWith:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)ratioWith:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isContainsNaN:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SKStoreViewControllerCloseDelegate;
@class UIViewController;
@class SKStoreProductViewController;

SWIFT_CLASS("_TtC16NaverAdsServices21GFPStoreProductHelper")
@interface GFPStoreProductHelper : NSObject <SKStoreProductViewControllerDelegate>
@property (nonatomic, weak) id <SKStoreViewControllerCloseDelegate> _Nullable closeDelegate;
- (nonnull instancetype)initWithTarget:(UIViewController * _Nonnull)target parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isLoadProductEnabled SWIFT_WARN_UNUSED_RESULT;
- (void)loadProductWith:(void (^ _Nonnull)(BOOL))completion;
- (void)productViewControllerDidFinish:(SKStoreProductViewController * _Nonnull)viewController;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices14GFPStringUtils")
@interface GFPStringUtils : NSObject
+ (BOOL)isValidUDID:(NSString * _Nullable)adID SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)whiteSpaceTrimWith:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)whiteSpaceNewLineTrimWith:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasLengthWhiteSpaceTrimWith:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isEmptyWith:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)encodeByAddingPercentEscapesWith:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nullable)queryComponentsWith:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isValidTimeFormatString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isValidPercentFormatString:(NSString * _Nullable)percentString SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isValidTimeOrPercentFormatString:(NSString * _Nullable)aString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)filterJsonStringWith:(NSDictionary * _Nullable)dictionary SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)jsonStringWith:(NSDictionary * _Nullable)dictionary SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary * _Nonnull)filterHostMetaWith:(NSDictionary * _Nullable)aDict SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasHttpPrefix:(NSString * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)convertWith:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSNumber;

SWIFT_CLASS("_TtC16NaverAdsServices12GFPTimeUtils")
@interface GFPTimeUtils : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSNumber * _Nonnull currentUptime;)
+ (NSNumber * _Nonnull)currentUptime SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)convertTimeFormatString:(NSString * _Nullable)timeString SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)convertTimeOrPercentFormatString:(NSString * _Nullable)timeString withDurationTimeInterval:(NSTimeInterval)durationTimeInterval SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)secondFromTimeInterval:(NSTimeInterval)timeInterval SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC16NaverAdsServices15GFPUADeviceInfo")
@interface GFPUADeviceInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull systemVersion;
@property (nonatomic, copy) NSString * _Nonnull deviceType;
- (nonnull instancetype)initWith:(NSString * _Nonnull)aSystemVersion deviceType:(NSString * _Nonnull)aDeviceType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLQueryItem;

SWIFT_CLASS("_TtC16NaverAdsServices11GFPURLUtils")
@interface GFPURLUtils : NSObject
+ (NSString * _Nullable)paramValueForKey:(NSString * _Nonnull)key inURL:(NSURL * _Nonnull)inURL SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)URLWithString:(NSString * _Nonnull)aUrlString SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)encodingURIComponent:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (NSURL * _Nullable)URLWithBaseString:(NSString * _Nonnull)baseStr queryItems:(NSArray<NSURLQueryItem *> * _Nonnull)queryItems SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)canOpenURL:(NSURL * _Nullable)aUrl SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasHttpPrefix:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GFPVastAd;

/// Represents a parsed <code><Vast></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices7GFPVast")
@interface GFPVast : NSObject
@property (nonatomic, readonly, strong) GFPVastAd * _Nullable firstInlineAd;
/// the uris that provides a tracking resource for the error
/// @sub-element
/// @required - error and ad both not
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull error;
/// the list of [GFPVastAd]
/// @sub-element
/// @required - error and ad both not
@property (nonatomic, copy) NSArray<GFPVastAd *> * _Nonnull ads;
/// the version of vast.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable version;
- (void)mergeWithOtherWithVast:(GFPVast * _Nullable)vast prevWrapperAd:(GFPVastAd * _Nullable)prevWrapperAd;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastInline;
@class GFPVastWrapper;
@class GFPVastMacroHelper;
@class GFPVastCreative;
@class GFPVastMediaFiles;
@class GFPVastExtension;
@class GFPVastNonLinearAds;
@class GFPVastAdVerification;
@class GFPVastCompanionAds;

/// Represents a parsed <code><Ad></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices9GFPVastAd")
@interface GFPVastAd : NSObject
/// within the nested elements of an <InLine> ad are all the files and URIs necessary to play
/// and track the ad. In a chain of <Wrapper> VAST responses, an <InLine> response ends the chain.
/// @sub-element
/// @required inline, wrapper both not allowed
@property (nonatomic, strong) GFPVastInline * _Nullable vastInline;
/// VAST Wrappers are used to redirect the media player to another server for either an
/// additional <Wrapper> or the VAST <InLine> ad. In addition to the URI that points to another
/// file, the Wrapper may contain tracking elements that provide tracking for the InLine ad that
/// is served following one or more wrappers. A Wrapper may also contain <Companion> creative and <Icon> creative. And while <Linear> and <NonLinear> elements are available
/// in the Wrapper, they are only used for tracking. No media files are provided for Linear
/// elements, nor are resource files provided for NonLinear elements. Other elements offered
/// for InLine ads may not be offered for Wrappers.
/// @sub-element
/// @required inline, wrapper both not allowed
@property (nonatomic, strong) GFPVastWrapper * _Nullable wrapper;
/// the ad server-defined identifier string for the ad
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable id;
@property (nonatomic, readonly) NSInteger podSequence;
@property (nonatomic, readonly, copy) NSString * _Nullable adTypeValue;
/// \param xmlNode the node that have “Ad” key
///
@property (nonatomic, strong) GFPVastTrackingInfo * _Nullable vastTrackingInfo;
@property (nonatomic, strong) GFPNASVastControlInfo * _Nullable vastControlInfo;
- (void)setUpVastControlInfoWithSkipInfo:(GFPVastAdSkipInfo * _Nullable)skipInfo;
- (BOOL)setUpVastTrackingInfoWithMacroHelper:(GFPVastMacroHelper * _Nonnull)macroHelper error:(NSError * _Nullable * _Nullable)error;
- (BOOL)setUpVastCompanionTrackingInfoWithDataSource:(id <NASVastMacroDataSource> _Nullable)dataSource error:(NSError * _Nullable * _Nullable)error;
@property (nonatomic, readonly, strong) GFPVastCreative * _Nullable mediaCreative;
@property (nonatomic, readonly) double videoDuration;
@property (nonatomic, readonly, strong) GFPVastMediaFiles * _Nullable mediaFiles;
@property (nonatomic, readonly, copy) NSArray<GFPVastExtension *> * _Nonnull creativeExtensions;
@property (nonatomic, readonly, copy) NSArray<GFPNASLoudnessNormalization *> * _Nonnull loudness;
@property (nonatomic, readonly, strong) GFPVastNonLinearAds * _Nullable nonLinearAds;
@property (nonatomic, readonly, copy) NSArray<GFPVastAdVerification *> * _Nonnull adVerifications;
@property (nonatomic, readonly, copy) NSArray<GFPVastIcon *> * _Nonnull icons;
@property (nonatomic, readonly, strong) GFPVastCompanionAds * _Nullable companionAds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><AdParameters></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices19GFPVastAdParameters")
@interface GFPVastAdParameters : NSObject
/// the metadata for the ad
/// @Value of Node.
@property (nonatomic, copy) NSString * _Nullable metaData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices17GFPVastAdSkipData")
@interface GFPVastAdSkipData : NSObject
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dictionary OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices17GFPVastAdSkipInfo")
@interface GFPVastAdSkipInfo : NSObject
@property (nonatomic, readonly) BOOL useVastSkip;
- (nonnull instancetype)initWithVastSkippable:(BOOL)vastSkippable data:(GFPVastAdSkipData * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSTimeInterval skipMin;
@property (nonatomic, readonly) NSTimeInterval skipAfter;
@property (nonatomic, readonly) BOOL isValidSkip;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><AdSystem></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices15GFPVastAdSystem")
@interface GFPVastAdSystem : NSObject
/// the string that provides the name of the ad server that returned the ad
/// @Value of Node
@property (nonatomic, copy) NSString * _Nullable adServerName;
/// the string that provides the version number of the ad system that returned the ad.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastJavaScriptResource;
@class GFPVastBaseAdverificationResource;

SWIFT_CLASS("_TtC16NaverAdsServices21GFPVastAdVerification")
@interface GFPVastAdVerification : NSObject <GFPOMIDInfoPresentable>
/// the container for the uri to the JavaScript file used to collect verification data.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastJavaScriptResource *> * _Nullable javaScriptResources;
/// A reference to a non-JavaScript or custom-integration resource intended for collecting verification data via the listed apiFramework.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastBaseAdverificationResource *> * _Nullable executableResources;
/// The verification vendor may provide URIs for tracking events relating to the execution of
/// their code during the ad session.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastTracking *> * _Nullable trackingEvents;
/// the identifier for the verification vendor. The recommended format is [domain]-[useCase], to avoid name
/// collisions. For example, <code>company.com-omid</code>.
/// @attribute
/// @required
@property (nonatomic, copy) NSString * _Nullable vendor;
/// GFPOMIDInfoPresentable
@property (nonatomic, readonly, copy) NSString * _Nullable verificationUrl;
@property (nonatomic, copy) NSString * _Nullable verificationParams;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable verificationNotExecutedUrls;
- (BOOL)isValid SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><Advertiser></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices17GFPVastAdvertiser")
@interface GFPVastAdvertiser : NSObject
/// the name of the advertiser as defined by the ad serving party.
/// @Value of Node.
@property (nonatomic, copy) NSString * _Nullable name;
/// the (optional) identifier for the advertiser, provided by the ad server.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable advertiserId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices33GFPVastBaseAdverificationResource")
@interface GFPVastBaseAdverificationResource : NSObject
/// @Value of Node
@property (nonatomic, copy) NSString * _Nullable value;
/// The name of the API framework used to execute the AdVerification code
/// @attribute
/// @required
@property (nonatomic, copy) NSString * _Nullable apiFramework;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum GFPVastRemindType : NSInteger;

SWIFT_CLASS("_TtC16NaverAdsServices19GFPVastBaseResource")
@interface GFPVastBaseResource : NSObject
@property (nonatomic) enum GFPVastRemindType remindType;
/// A URI to the iframe creative file to be used for the ad component identified in the parent
/// element. in StaticResource, IFrameResource
/// A HTML code snippet (within a CDATA element) in HTMLResource
@property (nonatomic, copy) NSString * _Nullable content;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><Category></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices15GFPVastCategory")
@interface GFPVastCategory : NSObject
/// @Value of Node.
/// A string that provides a category code or label that identifies the ad content
/// category.
@property (nonatomic, copy) NSString * _Nullable categoryCode;
/// A URL for the organizational authority that produced the list being used to identify
/// ad content category. if empty, error code 203
/// @attributes
/// @required
@property (nonatomic, copy) NSString * _Nullable authority;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><ClosedCaptionFile></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices24GFPVastClosedCaptionFile")
@interface GFPVastClosedCaptionFile : NSObject
/// A CDATA-wrapped URI to a file providing Closed Caption info for the media file.
/// @Value of Node.
@property (nonatomic, copy) NSString * _Nullable content;
/// Identifies the MIME type of the file provided.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable mimeType;
/// Language of the Closed Caption File using ISO 631-1 codes. An optional locale
/// suffix can also be provided.
/// Example:- “en”, “en-US”, “zh-TW”
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable language;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><CompanionAds></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices19GFPVastCompanionAds")
@interface GFPVastCompanionAds : NSObject
/// The list of [CompanionAd].
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPNASVastCompanionAd *> * _Nonnull companionAds;
/// accepts one of the following values: <code>all</code> <code>any</code> or `none.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable required;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastUniversalAdId;
@class GFPVastLinear;

/// Represents a parsed <code><Creative></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices15GFPVastCreative")
@interface GFPVastCreative : NSObject
/// @sub-element
/// @required
@property (nonatomic, strong) GFPVastUniversalAdId * _Nullable universalAdId;
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPVastExtension *> * _Nonnull creativeExtensions;
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastLinear * _Nullable linear;
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastNonLinearAds * _Nullable nonLinearAds;
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastCompanionAds * _Nullable companionAds;
/// A string used to identify the ad server that provides the creative
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable id;
/// Used to provide the ad server’s unique identifier for the creative. In VAST 4, the
/// UniversalAdId element was introduced to provide a unique identifier for the creative
/// that is maintained across systems. Please see section 3.7.1 for details on the UniversalAdId
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable adId;
/// A string that identifies an API that is needed to execute the creative.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable apiFramework;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices25GFPVastExecutableResource")
@interface GFPVastExecutableResource : GFPVastBaseAdverificationResource
/// The type of executable resource provided. The exact value used should be agreed
/// upon by verification integrators and vendors who are implementing verification in
/// a custom environment.
/// @attribute
/// @required
@property (nonatomic, copy) NSString * _Nullable type;
@end


/// Represents a parsed <code><Extension></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices16GFPVastExtension")
@interface GFPVastExtension : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessNormalization;)
+ (NSString * _Nonnull)kNASLoudnessNormalization SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASNonLinearRemind;)
+ (NSString * _Nonnull)kNASNonLinearRemind SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessEnbaleKey;)
+ (NSString * _Nonnull)kNASLoudnessEnbaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessVersionKey;)
+ (NSString * _Nonnull)kNASLoudnessVersionKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessContentKey;)
+ (NSString * _Nonnull)kNASLoudnessContentKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessContentTypeKey;)
+ (NSString * _Nonnull)kNASLoudnessContentTypeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessDataKey;)
+ (NSString * _Nonnull)kNASLoudnessDataKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kNASLoudnessPropertiesKey;)
+ (NSString * _Nonnull)kNASLoudnessPropertiesKey SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable value;
/// A string that identifies the type of extension.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable type;
/// A string that identifies if loudness
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull creativeDict;
@property (nonatomic) enum GFPExtensionCreativeType creativeType;
@property (nonatomic, strong) GFPNASLoudnessNormalization * _Nullable loudness;
@property (nonatomic, strong) GFPNasNonLinearRemind * _Nullable nonLinear;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastIconClicks;
enum GFPVastResourceCode : NSInteger;

/// Represents a parsed <code><Icon></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices11GFPVastIcon")
@interface GFPVastIcon : NSObject
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastStaticResource * _Nullable staticResource;
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastBaseResource * _Nullable iframeResource;
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastBaseResource * _Nullable htmlResource;
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastIconClicks * _Nullable iconClicks;
/// Content A URI to the industry program page opened when a viewer clicks the icon.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nullable iconViewTracking;
/// The program represented in the icon (e.g. “AdChoices”).
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable program;
/// Pixel width of the icon asset.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable width;
/// Pixel height of the icon asset.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable height;
/// The x-coordinate of the top, left corner of the icon asset relative to the ad display
/// area. Values of “left” or “right” also accepted and indicate the leftmost or rightmost
/// available position for the icon asset.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable xPosition;
/// The y-coordinate of the top left corner of the icon asset relative to the ad display
/// area; values of “top” or “bottom” also accepted and indicate the topmost or
/// bottommost available position for the icon asset.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable yPosition;
/// The duration the icon should be displayed unless clicked or ad is finished playing;
/// provided in the format HH:MM:SS.mmm or HH:MM:SS where .mmm is
/// milliseconds and optional.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable duration;
/// The time of delay from when the associated linear creative begins playing to when
/// the icon should be displayed; provided in the format HH:MM:SS.mmm or
/// HH:MM:SS.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable offset;
/// Identifies the API needed to execute the icon resource file if applicable.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable apiFramework;
/// The pixel ratio for which the icon creative is intended. The pixel ratio is the ratio of
/// physical pixels on the device to the device-independent pixels. An ad intended for
/// display on a device with a pixel ratio that is twice that of a standard 1:1 pixel ratio
/// would use the value “2 “ Default value is “1 “.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable pxratio;
/// Alternative text for the image. In an html5 image tag this should be the text for the
/// alt attribute. This should enable screen readers to properly read back a
/// description of the icon for visually impaired users
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable altText;
/// Hover text for the image. In an html5 image tag this should be the text for the title
/// attribute
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable hoverText;
@property (nonatomic, copy) NSString * _Nullable resourceValue;
@property (nonatomic) enum GFPVastResourceCode resourceCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><IconClickFallbackImage></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices29GFPVastIconClickFallbackImage")
@interface GFPVastIconClickFallbackImage : NSObject
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSString * _Nullable altText;
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastStaticResource * _Nullable staticResource;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><IconClicks></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices17GFPVastIconClicks")
@interface GFPVastIconClicks : NSObject
/// The <IconClickThrough> is used to provide a URI to the industry program page that the
/// media player opens when the icon is clicked.
/// Content A URI to the industry program page opened when a viewer clicks the icon.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSString * _Nullable iconClickThrough;
/// <IconClickTracking> is used to track click activity within the icon.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nullable iconClickTracking;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable iconClickTrackingValues;
/// The <IconClickFallbackImages> element is used to provide information disclosure for
/// platforms which do not support HTML rendering, by baking the information into an image.
/// This is a fallback for when the buyer cannot rely on <IconClickThrough> for disclosure.
/// When an icon click occurs, the ad must pause and the image must be rendered above the
/// © 2019 IAB Technology Laboratory 61 VAST_v4.2
/// video. The player must provide a means for the user to close the dialogue, for example by
/// pressing the back button. The image must not be obstructed and should not be downloaded
/// unless a click-action occurs.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastIconClickFallbackImage *> * _Nullable IconClickFallbackImages;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, GFPVastIconType, open) {
  GFPVastIconTypeProvider = 0,
  GFPVastIconTypePostAdAleart = 1,
  GFPVastIconTypeIconSearchKeyword = 2,
};


/// Represents a parsed <code><CompanionClickTracking></code> element.
/// Represents a parsed <code><IconClickTracking></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices17GFPVastImpression")
@interface GFPVastImpression : NSObject
/// A URI to the tracking resource file to be called when a click corresponding to the
/// id attribute (if provided) occurs.
@property (nonatomic, copy) NSString * _Nullable value;
/// id An id for the click to be measured.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable impressionId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastPricing;
@class GFPVastSurvey;
@class GFPVastViewbleImpression;

/// Represents a parsed <code><InLine></code> element.
/// last of chain in vast wrapper . just check inline tag
SWIFT_CLASS("_TtC16NaverAdsServices13GFPVastInline")
@interface GFPVastInline : NSObject
/// the ad serving party must provide a descriptive name for the system that serves the ad.
/// @sub-element
/// @required
@property (nonatomic, strong) GFPVastAdSystem * _Nullable adSystem;
/// the ad serving party must provide a title for the ad.
/// @sub-element
/// @required
@property (nonatomic, copy) NSString * _Nullable adTitle;
/// the ad server provides an impression-tracking uris.
/// @sub-element
/// @required
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nonnull impressions;
/// the serving id of the ad.
/// @sub-element
/// @required
@property (nonatomic, copy) NSString * _Nullable adServingId;
/// the list of [GFPVastCategory].
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPVastCategory *> * _Nonnull categories;
/// the description of the ad.
/// @sub-element
/// @optional
@property (nonatomic, copy) NSString * _Nullable inlineDescription;
/// the value containing an advertiser name can help publishers prevent display of the ad with its competitors
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastAdvertiser * _Nullable advertiser;
/// the value used to provide a value that represents a price that can be used by real-time bidding (RTB) systems.
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastPricing * _Nullable pricing;
/// the uri to any resource file having to do with collecting survey data.
/// The survey node is deprecated in VAST 4.1
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastSurvey * _Nullable survey;
/// the uris that provides a tracking resource for the error.
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull errors;
/// the list of [GFPVastExtension]
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPVastExtension *> * _Nonnull extensions;
/// the ad server may provide uris for tracking publisher-determined viewability.
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastViewbleImpression * _Nullable viewableImpression;
/// the list of [GFPVAstAdVerification].
/// @sub-element
/// @optional
@property (nonatomic, copy) NSArray<GFPVastAdVerification *> * _Nonnull adVerification;
/// the list of [GFPVastCreative].
/// @sub-element
/// @required
@property (nonatomic, copy) NSArray<GFPVastCreative *> * _Nonnull creatives;
/// Inherited From Wrapper
/// @attributes
/// @optional
/// the boolean value that identifies whether subsequent Wrappers after a requested VAST response is allowed.
/// If <code>false</code>, any Wrappers received (i.e. no an Inline VAST response) should be ignored. Otherwise, VAST Wrapper
/// received should be accepted. (default value is <code>true</code>)
@property (nonatomic) BOOL followAdditionalWrappers;
/// Inherited From Wrapper
/// @attributes
/// @optional
/// the boolean value that identifies whether multiple ads are allowed in the requested VAST response.
/// If <code>true</code>, both Pods and stand-alone ads are allowed. If <code>false</code>, only the first stand-alone Ad
/// (with no <code>sequence</code> values) in the requested VAST response is allowed. Default value is <code>false</code>.
@property (nonatomic) BOOL allowMultipleAds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><InteractiveCreativeFile></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices30GFPVastInteractiveCreativeFile")
@interface GFPVastInteractiveCreativeFile : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices25GFPVastJavaScriptResource")
@interface GFPVastJavaScriptResource : GFPVastBaseAdverificationResource
/// Boolean value. If true, this resource is optimized and able to execute in an
/// environment without DOM and other browser built-ins (e.g. iOS’ JavaScriptCore)
/// @attribute
/// @required
@property (nonatomic, copy) NSString * _Nullable browserOptional;
@end

@class GFPVastVideoClicks;

/// Represents a parsed <code><Linear></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices13GFPVastLinear")
@interface GFPVastLinear : NSObject
/// @sub-elem
/// @required - inline
@property (nonatomic, copy) NSString * _Nullable duration;
/// @sub-elem
/// @required - inline
@property (nonatomic, strong) GFPVastMediaFiles * _Nullable mediaFiles;
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastAdParameters * _Nullable adParameters;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastTracking *> * _Nonnull trackingEvents;
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastVideoClicks * _Nullable videoClicks;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastIcon *> * _Nullable icons;
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable skipOffset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol GFPVastLoaderDelegate;

SWIFT_CLASS("_TtC16NaverAdsServices13GFPVastLoader")
@interface GFPVastLoader : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSTimeInterval kVastTagTimeOutTimeInterval;)
+ (NSTimeInterval)kVastTagTimeOutTimeInterval SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, weak) id <GFPVastLoaderDelegate> _Nullable delegate;
@property (nonatomic, weak) id <NASVastMacroDataSource> _Nullable macroDataSource;
- (nonnull instancetype)initWithMaxDirect:(NSInteger)maxDirect vastTimeout:(CFTimeInterval)vastTimeout skipInfo:(GFPVastAdSkipInfo * _Nullable)skipInfo dataSource:(id <NASVastMacroDataSource> _Nullable)dataSource OBJC_DESIGNATED_INITIALIZER;
- (void)loadWithVastString:(NSString * _Nonnull)vastString;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP16NaverAdsServices21GFPVastLoaderDelegate_")
@protocol GFPVastLoaderDelegate
- (void)vastLoader:(GFPVastLoader * _Nonnull)vastLoader didLoadVast:(GFPVast * _Nonnull)vast;
- (void)vastLoader:(GFPVastLoader * _Nonnull)vastLoader didFailWithError:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC16NaverAdsServices18GFPVastMacroHelper")
@interface GFPVastMacroHelper : NSObject
@property (nonatomic, weak) id <NASVastMacroDataSource> _Nullable macroDataSource;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><MediaFile></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices16GFPVastMediaFile")
@interface GFPVastMediaFile : NSObject
/// A CDATA-wrapped URI to a media file.
/// @Value of Node
@property (nonatomic, copy) NSString * _Nullable value;
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable deliveryType;
/// MIME type for the file container. Popular MIME types include, but are not
/// limited to “video/mp4” for MP4, “audio/mpeg” and “audio/aac” for audio ads
/// @attributes
/// @required
@property (nonatomic, copy) NSString * _Nullable type;
/// The native width of the video file, in pixels. (0 for audio ads)
/// @attributes
/// @required
@property (nonatomic) float width;
/// The native height of the video file, in pixels. (0 for audio ads)
/// @attributes
/// @required
@property (nonatomic) float height;
/// The codec used to encode the file which can take values as specified by RFC
/// 4281: http://tools.ietf.org/html/rfc4281
/// @attribute
/// @optional
@property (nonatomic, copy) NSString * _Nullable codec;
/// An identifier for the media file.
/// @attribute
/// @optional
@property (nonatomic, copy) NSString * _Nullable mediaFileId;
/// For progressive load video or audio, the bitrate value specifies the average
/// bitrate for the media file; otherwise the minBitrate and maxBitrate can be
/// used together to specify the minimum and maximum bitrates for streaming
/// videos or audio files.
/// @attribute
/// @optional -not allowed both (bitrate / max&min)
@property (nonatomic, copy) NSString * _Nullable bitrate;
@property (nonatomic, copy) NSString * _Nullable maxBitrate;
@property (nonatomic, copy) NSString * _Nullable minBitrate;
/// [Deprecated in 4.1 in preparation for VPAID being phased out]
/// identifies the API needed to execute an interactive media file, but current
/// support is for backward compatibility. Please use the
/// <InteractiveCreativeFile> element to include files that require an API
/// for execution.
@property (nonatomic, copy) NSString * _Nullable apiFramework;
/// Type of media file (2D / 3D / 360 / etc).
/// Optional.
/// Default value = 2D
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable mediaType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GFPVastMezzanine;

/// Represents a parsed <code><MediaFiles></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices17GFPVastMediaFiles")
@interface GFPVastMediaFiles : NSObject
/// @sub-elem
/// @required
@property (nonatomic, copy) NSArray<GFPVastMediaFile *> * _Nullable mediaFiles;
/// @sub-elem
/// @required - in ad-stitched video executions
@property (nonatomic, copy) NSArray<GFPVastMezzanine *> * _Nullable mezzanine;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastInteractiveCreativeFile *> * _Nullable interactiveCreativeFile;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastClosedCaptionFile *> * _Nullable closedCaptionFiles;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><Mezzanine></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices16GFPVastMezzanine")
@interface GFPVastMezzanine : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><NonLinearAd></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices18GFPVastNonLinearAd")
@interface GFPVastNonLinearAd : NSObject
/// @sub-elem
/// @optional
/// only in Inline
@property (nonatomic, strong) GFPVastStaticResource * _Nullable staticResource;
/// @sub-elem
/// @optional
/// only in Inline
@property (nonatomic, strong) GFPVastBaseResource * _Nullable iframeResource;
/// @sub-elem
/// @optional
/// only in Inline
@property (nonatomic, strong) GFPVastBaseResource * _Nullable htmlResource;
/// @sub-elem
/// @optional
/// only in Inline
@property (nonatomic, strong) GFPVastAdParameters * _Nullable adParameters;
/// @sub-elem
/// @optional
/// only in Inline
@property (nonatomic, copy) NSString * _Nullable nonLinearClickThrough;
/// @sub-elem
/// @optional
/// both in Inline & wrapper
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nonnull nonLinearClickTracking;
/// An optional identifier for the creative
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable ID;
/// The width of the companion ad in pixels
/// @attributes
/// @required
@property (nonatomic) float width;
/// The height of the companion ad in pixels
/// @attributes
/// @required
@property (nonatomic) float height;
/// The API necessary to communicate with the creative if available.
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable apiFramework;
/// The minimum suggested duration that the creative should be displayed;
/// duration is in the format HH:MM:SS.mmm (where .mmm is in milliseconds and is optional)
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable minSuggestedDuration;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><NonLinearAds></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices19GFPVastNonLinearAds")
@interface GFPVastNonLinearAds : NSObject
/// @sub-elem
/// @required
@property (nonatomic, copy) NSArray<GFPVastNonLinearAd *> * _Nonnull nonlinear;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastTracking *> * _Nonnull trackingEvents;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><Pricing></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices14GFPVastPricing")
@interface GFPVastPricing : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, GFPVastRemindType, open) {
  GFPVastRemindTypeNone = 0,
  GFPVastRemindTypeBanner = 1,
  GFPVastRemindTypeText = 2,
};

typedef SWIFT_ENUM(NSInteger, GFPVastResourceCode, open) {
  GFPVastResourceCodeNone = 0,
  GFPVastResourceCodeElection = 1,
  GFPVastResourceCodeProviderNotice = 2,
  GFPVastResourceCodeAdProviderNotice = 3,
  GFPVastResourceCodeAlert = 4,
  GFPVastResourceCodeSearchKeyword = 5,
  GFPVastResourceCodeAdChoices = 6,
};


SWIFT_CLASS("_TtC16NaverAdsServices21GFPVastStaticResource")
@interface GFPVastStaticResource : GFPVastBaseResource
/// The MIME type of the static resource file.
/// @attributes
/// @required
@property (nonatomic, copy) NSString * _Nullable creativeType;
@end


/// Represents a parsed <code><Survey></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices13GFPVastSurvey")
@interface GFPVastSurvey : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><Tracking></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices15GFPVastTracking")
@interface GFPVastTracking : NSObject
/// A URI to the tracking resource for the event specified using the event attribute.
/// @Value of Node
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nonnull eventName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC16NaverAdsServices19GFPVastTrackingInfo")
@interface GFPVastTrackingInfo : NSObject
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSArray<GFPProgressTrackingEvent *> * _Nonnull progressTrackingEvent;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull errorTrackings;
@property (nonatomic, strong) GFPVastVideoClicks * _Nullable videoClicks;
- (void)setMacroDataSource:(id <NASVastMacroDataSource> _Nullable)macroDataSource;
- (NSArray<NSString *> * _Nonnull)impressionEvent SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)clickTrackings SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)loaded SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)start SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)firstQuartile SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)midpoint SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)thirdQuartile SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)complete SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)skip SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)mute SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)unmute SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)pause SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)resume SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)rewind SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)otherAdInteraction SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)creativeView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><UniversalAdId></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices20GFPVastUniversalAdId")
@interface GFPVastUniversalAdId : NSObject
/// A URI to any resource relating to an integrated survey
/// @Value of Node
@property (nonatomic, copy) NSString * _Nullable value;
/// A string used to identify the URL for the registry website where the unique
/// creative ID is cataloged. Default value is “unknown.”
/// @attributes
/// @required
@property (nonatomic, copy) NSString * _Nullable idRegistry;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><VideoClicks></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices18GFPVastVideoClicks")
@interface GFPVastVideoClicks : NSObject
/// a URI to the advertiser’s site that the media player opens when a viewer clicks the ad.
/// only inline linear
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastImpression * _Nullable clickThrough;
/// Multiple <ClickTracking> elements can be used in the case where multiple parties would
/// like to track the Linear ad clickthrough.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nonnull clickTracking;
/// The <CustomClick> is used to track any interactions with the linear ad that do not include
/// the clickthrough click and do not take the viewer away from the media player. For example,
/// if an ad vendor wants to track that a viewer clicked a button to change the ad’s background
/// color, the <CustomClick> element holds the URI to notify the ad vendor that this click
/// happened. An API may be needed to inform the player that a click occurred and that the
/// corresponding URI should be activated.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nonnull customClick;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><ViewbleImpression></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices24GFPVastViewbleImpression")
@interface GFPVastViewbleImpression : NSObject
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nullable viewable;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nullable notViewable;
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nullable viewUndeterminded;
/// @attributes
/// @optional
@property (nonatomic, copy) NSString * _Nullable impressionId;
- (void)addImpressionsWithObject:(GFPVastViewbleImpression * _Nullable)object;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents a parsed <code><Wrapper></code> element.
SWIFT_CLASS("_TtC16NaverAdsServices14GFPVastWrapper")
@interface GFPVastWrapper : NSObject
/// list of impresion
/// @sub-elem
/// @required
@property (nonatomic, copy) NSArray<GFPVastImpression *> * _Nonnull impressions;
/// the value used to provide a URI to a secondary VAST response.
/// @sub-elem
/// @required
@property (nonatomic, copy) NSString * _Nullable vastAdTagURI;
/// The ad serving party must provide a descriptive name for the system that serves the ad.
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastAdSystem * _Nullable adSystem;
/// the value used to provide a value that represents a price that can be used by real-time bidding (RTB) systems.
/// @sub-element
/// @optional
@property (nonatomic, strong) GFPVastPricing * _Nullable pricing;
/// the uris that provides a tracking resource for the error.
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull errors;
/// The ad server may provide URIs for tracking publisher-determined viewability
/// @sub-elem
/// @optional
@property (nonatomic, strong) GFPVastViewbleImpression * _Nullable viewableImpression;
/// the list of [GFPVastExtension].
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastExtension *> * _Nonnull extensions;
/// the list of [GFPVAstAdVerification]
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastAdVerification *> * _Nonnull adVerifications;
/// the list of [GFPVastCreative]
/// @sub-elem
/// @optional
@property (nonatomic, copy) NSArray<GFPVastCreative *> * _Nonnull creatives;
/// the boolean value that identifies whether subsequent Wrappers after a requested VAST response is allowed.
/// If <code>false</code>, any Wrappers received (i.e. no an Inline VAST response) should be ignored. Otherwise, VAST Wrapper
/// received should be accepted. (default value is <code>true</code>)
/// @attributes
/// @optional
@property (nonatomic) BOOL followAdditionalWrappers;
/// the boolean value that identifies whether multiple ads are allowed in the requested VAST response.
/// If <code>true</code>, both Pods and stand-alone ads are allowed. If <code>false</code>, only the first stand-alone Ad
/// (with no <code>sequence</code> values) in the requested VAST response is allowed. Default value is <code>false</code>.
/// @attributes
/// @optional
@property (nonatomic) BOOL allowMultipleAds;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;
@class UILabel;

SWIFT_CLASS("_TtC16NaverAdsServices12GFPViewUtils")
@interface GFPViewUtils : NSObject
+ (void)removeSubviews:(UIView * _Nullable)aView;
+ (CGRect)originalFrame:(UIView * _Nullable)aView SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isVisibility:(UIView * _Nullable)aView SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isViewableOnScreen:(UIView * _Nullable)aView SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isTouchedOnScreenCenter:(UIView * _Nonnull)aView SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAtLeastHalfViewable:(UIView * _Nullable)aView SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)exposedPercentage:(UIView * _Nullable)aView SWIFT_WARN_UNUSED_RESULT;
+ (CGRect)visibleRectangle:(UIView * _Nullable)aView SWIFT_WARN_UNUSED_RESULT;
+ (void)fillSuperviewWithCenterAlignment:(UIView * _Nullable)aView;
+ (void)setConstraintWithFrameSize:(UIView * _Nullable)aView;
+ (void)setConstraintWithSize:(CGSize)size view:(UIView * _Nullable)view;
+ (void)matchSuperViewSize:(UIView * _Nullable)aView;
+ (void)matchSuperViewSafetyAreaThroughConstraints:(UIView * _Nullable)aView;
+ (void)arrangeToSuperviewWithXAttribute:(enum NSLayoutAttribute)xAttribute yAttribute:(enum NSLayoutAttribute)yAttribute view:(UIView * _Nullable)view;
+ (void)arrangeToSuperviewWithXAttribute:(enum NSLayoutAttribute)xAttribute yAttribute:(enum NSLayoutAttribute)yAttribute offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY view:(UIView * _Nullable)view;
+ (void)arrangeToSuperViewApplyingSafeAreaWithXAttribute:(enum NSLayoutAttribute)xAttribute yAttribute:(enum NSLayoutAttribute)yAttribute offsetX:(CGFloat)offsetX offsetY:(CGFloat)offsetY view:(UIView * _Nullable)view;
+ (void)removeSizeConstraintOnSuperview:(UIView * _Nullable)aView;
+ (void)removeSizeConstraintOnSuperviewLayoutGuide:(UIView * _Nullable)aView;
+ (void)removeArrangeConstraintsOnSuperview:(UIView * _Nullable)aView;
+ (void)removeArrangeConstraintsOnSuperviewSafeLayoutGuide:(UIView * _Nullable)aView;
+ (void)removeSizeConstraintOnSelf:(UIView * _Nullable)aView;
+ (void)hideViewWhileTouchableWithView:(UIView * _Nullable)view;
+ (void)hideViewWhileTouchableWithLabel:(UILabel * _Nullable)label;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP16NaverAdsServices24GFPWebViewAppEnvDelegate_")
@protocol GFPWebViewAppEnvDelegate
@property (nonatomic, readonly, copy) NSString * _Nonnull web_env_sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nonnull web_env_sdkName;
@property (nonatomic, readonly) BOOL web_env_limitAdTracking;
@property (nonatomic, readonly, copy) NSString * _Nullable web_env_adId;
@property (nonatomic, readonly, copy) NSString * _Nullable web_env_nac;
- (void)web_env_updateNacWithNac:(NSString * _Nullable)nac;
@end

@class WKWebView;

SWIFT_CLASS("_TtC16NaverAdsServices17GFPWebViewManager")
@interface GFPWebViewManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GFPWebViewManager * _Nonnull shared;)
+ (GFPWebViewManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, weak) id <GFPWebViewAppEnvDelegate> _Nullable delegate;
+ (void)registerDelegate:(id <GFPWebViewAppEnvDelegate> _Nullable)delegate;
+ (void)registerWebView:(WKWebView * _Nonnull)webView;
+ (void)examineWebViewStatusWithWebView:(WKWebView * _Nonnull)webView result:(void (^ _Nonnull)(NSError * _Nullable, NSDictionary<NSString *, id> * _Nullable))result;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKUserContentController;
@class WKScriptMessage;

@interface GFPWebViewManager (SWIFT_EXTENSION(NaverAdsServices)) <WKScriptMessageHandlerWithReply>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message replyHandler:(void (^ _Nonnull)(id _Nullable, NSString * _Nullable))replyHandler;
@end


SWIFT_PROTOCOL("_TtP16NaverAdsServices22NASVastMacroDataSource_")
@protocol NASVastMacroDataSource <NSObject>
- (NSString * _Nullable)getCurrentMediaTimeString SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getUserAgent SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getUniversalAdId SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPodSequence SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getAssetURI SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSDictionary<KeyType, ObjectType> (SWIFT_EXTENSION(NaverAdsServices))
- (id _Nullable)objectWithKey:(id _Nullable)key SWIFT_WARN_UNUSED_RESULT;
- (id _Nullable)objectWithKey:(id _Nullable)key returnType:(Class _Nonnull)classType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)boolWithKey:(id _Nullable)key SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isEmpty:(NSDictionary * _Nullable)dict SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(NaverAdsServices))
- (NSString * _Nullable)encodingSubStringFromAIndex:(NSInteger)aIndex SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)encodingSubStringToAIndex:(NSInteger)aIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isStringNumeric SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC16NaverAdsServices19RemindCreativeTypes")
@interface RemindCreativeTypes : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull banner;)
+ (NSArray<NSString *> * _Nonnull)banner SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull image;)
+ (NSArray<NSString *> * _Nonnull)image SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface SKStoreProductViewController (SWIFT_EXTENSION(NaverAdsServices))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL canUse;)
+ (BOOL)canUse SWIFT_WARN_UNUSED_RESULT;
+ (void)setCanUse:(BOOL)value;
+ (BOOL)canUseStoreProduct SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP16NaverAdsServices34SKStoreViewControllerCloseDelegate_")
@protocol SKStoreViewControllerCloseDelegate
- (void)storeViewControllerClosed;
@end


@interface NSTimer (SWIFT_EXTENSION(NaverAdsServices))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) double kAttachedCheckDefaultFrequency;)
+ (double)kAttachedCheckDefaultFrequency SWIFT_WARN_UNUSED_RESULT;
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval block:(void (^ _Nonnull)(void))block repeats:(BOOL)repeats SWIFT_WARN_UNUSED_RESULT;
+ (NSTimer * _Nonnull)scheduledTimerWithTimeInterval:(NSTimeInterval)timeInterval block:(void (^ _Nonnull)(void))block repeats:(BOOL)repeats mode:(NSRunLoopMode _Nonnull)mode SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIColor (SWIFT_EXTENSION(NaverAdsServices))
+ (UIColor * _Nonnull)colorWithRGBIntWith:(uint64_t)rgbInt SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorWithRGBIntWith:(uint64_t)rgbInt alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nonnull)colorWithRedWith:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)colorWithHexStringWith:(NSString * _Nonnull)hexString SWIFT_WARN_UNUSED_RESULT;
+ (UIColor * _Nullable)colorWithHexStringWith:(NSString * _Nonnull)hexString type:(enum GFPHexCodeType)type SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIImageView (SWIFT_EXTENSION(NaverAdsServices))
- (void)startSpinningWith:(double)duration;
- (void)stopSpinning;
+ (UIImage * _Nullable)imageWithImageWithImage:(UIImage * _Nullable)image scaleSize:(CGSize)scaleSize SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIView (SWIFT_EXTENSION(NaverAdsServices))
+ (NSString * _Nonnull)frameWith:(CGRect)frame SWIFT_WARN_UNUSED_RESULT;
- (void)printSizeWithFunctionName:(NSArray<NSNumber *> * _Nonnull)functionName;
- (void)printOriginWithFunctionName:(NSArray<NSNumber *> * _Nonnull)functionName;
- (CGFloat)sideSafeAreaInsets SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)sizeWidth SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)sizeHeight SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)leftSafeInsets SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)rightSafeInsets SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)topSafeInsets SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)topBottomSafeAreaInsets SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)maxY SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)maxX SWIFT_WARN_UNUSED_RESULT;
- (void)showDebugBorderWithColorWithColor:(UIColor * _Nonnull)color;
- (void)addConstraintCenterWithAItem:(UIView * _Nullable)aItem toItem:(UIView * _Nullable)toItem attribute:(enum NSLayoutAttribute)attribute;
- (void)moveWith:(enum GFPAlignmentCenter)type;
- (void)moveWith:(enum GFPAlignmentCenter)type margin:(CGFloat)margin;
- (void)moveToTypeWith:(GFPAlignment)type margin:(CGFloat)margin;
- (void)moveToTypeWith:(GFPAlignment)type withView:(UIView * _Nullable)view gap:(CGFloat)gap;
- (void)alignWith:(GFPAlignment)type withView:(UIView * _Nullable)view;
- (void)alignWith:(GFPAlignment)type withView:(UIView * _Nullable)view gap:(CGFloat)gap;
- (void)alignCenterWith:(enum GFPAlignmentCenter)type withView:(UIView * _Nullable)view;
- (void)alignCenterWith:(enum GFPAlignmentCenter)type withView:(UIView * _Nullable)view gap:(CGFloat)gap;
- (void)updateSizeWith:(enum GFPSizeType)type value:(CGFloat)value;
- (void)updateSizeWith:(CGSize)aSize;
- (void)updateOriginWith:(CGPoint)aOrigin;
- (void)updateOriginTypeWith:(enum GFPOriginType)aType value:(CGFloat)aValue;
- (void)enableAccessibilityForImageSubviews;
- (void)disableAccessibilityForImageSubviews;
- (void)disableAccessibilityForSubviews;
+ (UIView * _Nullable)loadWithBundleWithABundle:(NSBundle * _Nullable)aBundle nibName:(NSString * _Nullable)nibName SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
