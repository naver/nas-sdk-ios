// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NaverAdsServices
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CoreLocation
import CoreTelephony
import Foundation
@_exported import NaverAdsServices
import Network
import OSLog
import QuartzCore
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPTimeUtils : ObjectiveC.NSObject {
  @objc public class var currentUptime: Foundation.NSNumber {
    @objc get
  }
  @objc public class func convertTimeFormatString(_ timeString: Swift.String?) -> Foundation.TimeInterval
  @objc(convertTimeOrPercentFormatString:withDurationTimeInterval:) public class func convertTimeOrPercentFormatString(_ timeString: Swift.String?, durationTimeInterval: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc public class func secondFromTimeInterval(_ timeInterval: Foundation.TimeInterval) -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPViewUtils : ObjectiveC.NSObject {
  @objc public class func removeSubviews(_ aView: UIKit.UIView?)
  @objc public class func originalFrame(_ aView: UIKit.UIView?) -> CoreFoundation.CGRect
  @objc public class func isVisibility(_ aView: UIKit.UIView?) -> Swift.Bool
  @objc public class func isViewableOnScreen(_ aView: UIKit.UIView?) -> Swift.Bool
  @objc public class func isTouchedOnScreenCenter(_ aView: UIKit.UIView) -> Swift.Bool
  @objc public class func isAtLeastHalfViewable(_ aView: UIKit.UIView?) -> Swift.Bool
  @objc public class func exposedPercentage(_ aView: UIKit.UIView?) -> CoreFoundation.CGFloat
  @objc public class func visibleRectangle(_ aView: UIKit.UIView?) -> CoreFoundation.CGRect
  @objc public class func fillSuperviewWithCenterAlignment(_ aView: UIKit.UIView?)
  @objc(setConstraintWithFrameSize:) public class func setConstraint(_ aView: UIKit.UIView?)
  @objc(setConstraintWithSize:view:) public class func setConstraint(_ size: CoreFoundation.CGSize, view: UIKit.UIView?)
  @objc public class func matchSuperViewSize(_ aView: UIKit.UIView?)
  @objc public class func matchSuperViewSafetyAreaThroughConstraints(_ aView: UIKit.UIView?)
  @objc public class func arrangeToSuperviewWithXAttribute(_ xAttribute: UIKit.NSLayoutConstraint.Attribute, yAttribute: UIKit.NSLayoutConstraint.Attribute, view: UIKit.UIView?)
  @objc public class func arrangeToSuperviewWithXAttribute(_ xAttribute: UIKit.NSLayoutConstraint.Attribute, yAttribute: UIKit.NSLayoutConstraint.Attribute, offsetX: CoreFoundation.CGFloat, offsetY: CoreFoundation.CGFloat, view: UIKit.UIView?)
  @objc public class func arrangeToSuperViewApplyingSafeAreaWithXAttribute(_ xAttribute: UIKit.NSLayoutConstraint.Attribute, yAttribute: UIKit.NSLayoutConstraint.Attribute, offsetX: CoreFoundation.CGFloat, offsetY: CoreFoundation.CGFloat, view: UIKit.UIView?)
  @objc public class func removeSizeConstraintOnSuperview(_ aView: UIKit.UIView?)
  @objc public class func removeSizeConstraintOnSuperviewLayoutGuide(_ aView: UIKit.UIView?)
  @objc public class func removeArrangeConstraintsOnSuperview(_ aView: UIKit.UIView?)
  @objc public class func removeArrangeConstraintsOnSuperviewSafeLayoutGuide(_ aView: UIKit.UIView?)
  @objc public class func removeSizeConstraintOnSelf(_ aView: UIKit.UIView?)
  @objc public class func hideViewWhileTouchable(view: UIKit.UIView?)
  @objc public class func hideViewWhileTouchable(label: UIKit.UILabel?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GFPNetworkType : Swift.Int {
  case Unknown
  case Ethernet
  case Wifi
  case Cellular
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPCellularType : Swift.Int {
  case Unknown
  case G2
  case G3
  case G4
  case G5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPNetworkUtils : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NaverAdsServices.GFPNetworkUtils
  @objc public var info: Swift.Dictionary<Swift.String, Swift.Int>?
  @objc public var networkType: NaverAdsServices.GFPNetworkType {
    @objc get
  }
  @objc public var cellularType: NaverAdsServices.GFPCellularType {
    @objc get
  }
  @objc public static var isWIFI: Swift.Bool {
    @objc get
  }
  @objc public static var networkTypeDescForInit: Swift.String {
    @objc get
  }
  @objc public static var networkTypeDescForAdcall: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GFPAlignmentCenter : Swift.Int {
  case vertical = 0
  case horizontal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPSizeType : Swift.Int {
  case height = 0
  case width
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPOriginType : Swift.Int {
  case x = 0
  case y
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPHexCodeType : Swift.Int {
  case rgba
  case argb
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension UIKit.UIColor {
  @objc(colorWithRGBIntWith:) dynamic public class func gfpColor(rgbInt: Swift.UInt64) -> UIKit.UIColor
  @objc(colorWithRGBIntWith:alpha:) dynamic public class func gfpColor(rgbInt: Swift.UInt64, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor
  @objc(colorWithRedWith:green:blue:alpha:) dynamic public class func gfpColor(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor
  @objc(colorWithHexStringWith:) dynamic public class func gfpColor(hexString: Swift.String) -> UIKit.UIColor?
  @objc(colorWithHexStringWith:type:) dynamic public class func gfpColor(hexString: Swift.String, type: NaverAdsServices.GFPHexCodeType = .rgba) -> UIKit.UIColor?
}
@objc extension UIKit.UIView {
  @objc(frameWith:) @_Concurrency.MainActor @preconcurrency dynamic public class func frame(_ frame: CoreFoundation.CGRect) -> Swift.String
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func printSize(functionName: [Swift.CChar])
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func printOrigin(functionName: [Swift.CChar])
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sideSafeAreaInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sizeWidth() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sizeHeight() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func leftSafeInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func rightSafeInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func topSafeInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func topBottomSafeAreaInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func maxY() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func maxX() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showDebugBorderWithColorWith(color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addConstraintCenterWith(aItem: UIKit.UIView?, toItem: UIKit.UIView?, attribute: UIKit.NSLayoutConstraint.Attribute)
  @objc(moveWith:) @_Concurrency.MainActor @preconcurrency dynamic public func moveWith(type: NaverAdsServices.GFPAlignmentCenter)
  @objc(moveWith:margin:) @_Concurrency.MainActor @preconcurrency dynamic public func moveWith(type: NaverAdsServices.GFPAlignmentCenter, margin: CoreFoundation.CGFloat)
  @objc(moveToTypeWith:margin:) @_Concurrency.MainActor @preconcurrency dynamic public func moveToTypeWith(type: NaverAdsServices.GFPAlignment, margin: CoreFoundation.CGFloat)
  @objc(moveToTypeWith:withView:gap:) @_Concurrency.MainActor @preconcurrency dynamic public func moveToTypeWith(type: NaverAdsServices.GFPAlignment, view: UIKit.UIView?, gap: CoreFoundation.CGFloat)
  @objc(alignWith:withView:) @_Concurrency.MainActor @preconcurrency dynamic public func alignWith(type: NaverAdsServices.GFPAlignment, view: UIKit.UIView?)
  @objc(alignWith:withView:gap:) @_Concurrency.MainActor @preconcurrency dynamic public func alignWith(type: NaverAdsServices.GFPAlignment, view: UIKit.UIView?, gap: CoreFoundation.CGFloat)
  @objc(alignCenterWith:withView:) @_Concurrency.MainActor @preconcurrency dynamic public func alignCenter(type: NaverAdsServices.GFPAlignmentCenter, view: UIKit.UIView?)
  @objc(alignCenterWith:withView:gap:) @_Concurrency.MainActor @preconcurrency dynamic public func alignCenter(type: NaverAdsServices.GFPAlignmentCenter, view: UIKit.UIView?, gap: CoreFoundation.CGFloat)
  @objc(updateSizeWith:value:) @_Concurrency.MainActor @preconcurrency dynamic public func updateSizeWith(type: NaverAdsServices.GFPSizeType, value: CoreFoundation.CGFloat)
  @objc(updateSizeWith:) @_Concurrency.MainActor @preconcurrency dynamic public func updateSizeWith(aSize: CoreFoundation.CGSize)
  @objc(updateOriginWith:) @_Concurrency.MainActor @preconcurrency dynamic public func updateOriginWith(aOrigin: CoreFoundation.CGPoint)
  @objc(updateOriginTypeWith:value:) @_Concurrency.MainActor @preconcurrency dynamic public func updateOriginTypeWith(aType: NaverAdsServices.GFPOriginType, aValue: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func enableAccessibilityForImageSubviews()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func disableAccessibilityForImageSubviews()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func disableAccessibilityForSubviews()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func loadWithBundle(aBundle: Foundation.Bundle?, nibName: Swift.String?) -> UIKit.UIView?
}
@objc extension UIKit.UIImageView {
  @objc(startSpinningWith:) @_Concurrency.MainActor @preconcurrency dynamic public func startSpinningWith(duration: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopSpinning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func imageWithImage(image: UIKit.UIImage?, scaleSize: CoreFoundation.CGSize) -> UIKit.UIImage?
}
public typealias ImageDownloadCompletionHandler = (UIKit.UIImage?, Foundation.URL?, Foundation.NSError?) -> Swift.Void
public typealias DownloadCompletionHandler = (Foundation.Data?, Foundation.URL?, Foundation.NSError?) -> Swift.Void
public typealias ImageCompletionHandler = (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void
public typealias ImageFullCompletionHandler = (UIKit.UIImage?, Foundation.URL?, Foundation.NSError?) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPDownloadCache : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NaverAdsServices.GFPDownloadCache
  @objc public func urlToNSURL(_ url: Foundation.URL) -> Foundation.NSURL?
  @objc public func isInvalidURL(_ url: Foundation.URL) -> Swift.Bool
  @objc public func updateDataWithURL(_ url: Foundation.URL)
  @objc public func imageWithURL(_ url: Foundation.URL) -> UIKit.UIImage?
  @objc public func dataWithURL(_ url: Foundation.URL, completion: @escaping NaverAdsServices.DownloadCompletionHandler)
  @objc public func dataWithURL(_ url: Foundation.URL, timeoutInterval: Foundation.TimeInterval, completion: @escaping NaverAdsServices.DownloadCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, completion: @escaping NaverAdsServices.ImageCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, fullCompletion: @escaping NaverAdsServices.ImageFullCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, timeoutInterval: Foundation.TimeInterval, fullCompletion: @escaping NaverAdsServices.ImageFullCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, timeoutInterval: Foundation.TimeInterval, completion: @escaping NaverAdsServices.ImageDownloadCompletionHandler)
  @objc public func clearCache()
  @objc deinit
}
@objc public protocol SKStoreViewControllerCloseDelegate {
  @objc func storeViewControllerClosed()
}
@objc extension StoreKit.SKStoreProductViewController {
  @objc @_Concurrency.MainActor @preconcurrency public static var canUse: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func canUseStoreProduct() -> Swift.Bool
}
@objc @objcMembers public class GFPStoreProductHelper : ObjectiveC.NSObject, StoreKit.SKStoreProductViewControllerDelegate {
  @objc weak public var closeDelegate: (any NaverAdsServices.SKStoreViewControllerCloseDelegate)?
  @objc public init(target: UIKit.UIViewController, parameters: [Swift.String : Any])
  @objc public func isLoadProductEnabled() -> Swift.Bool
  @objc public func loadProductWith(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func productViewControllerDidFinish(_ viewController: StoreKit.SKStoreProductViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPURLUtils : ObjectiveC.NSObject {
  @objc public class func paramValueForKey(_ key: Swift.String, inURL: Foundation.URL) -> Swift.String?
  @objc public class func URLWithString(_ aUrlString: Swift.String) -> Foundation.URL?
  @objc public class func encodingURIComponent(_ string: Swift.String) -> Swift.String?
  @objc public class func URLWithBaseString(_ baseStr: Swift.String, queryItems: [Foundation.NSURLQueryItem]) -> Foundation.URL?
  @objc public class func canOpenURL(_ aUrl: Foundation.URL?) -> Swift.Bool
  @objc public class func hasHttpPrefix(_ url: Foundation.URL) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension NaverAdsServices.GFPLogLevel : Swift.Comparable {
  public static func < (lhs: NaverAdsServices.GFPLogLevel, rhs: NaverAdsServices.GFPLogLevel) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GFPLog) public class GFPLog : ObjectiveC.NSObject {
  @objc(sharedInstance) public static let shared: NaverAdsServices.GFPLog
  @objc(logLevel) public var logLevel: NaverAdsServices.GFPLogLevel {
    @objc get
    @objc set
  }
  @objc(hasLogLevel) public var hasLogLevel: Swift.Bool {
    @objc get
  }
  @objc(logLevelDesc) public var logLevelDesc: Swift.String {
    @objc get
  }
  @objc(logIdentifier) public static var logIdentifier: Swift.String {
    @objc get
  }
  @objc(logLevelDescWith:) public static func logLevelDescription(logLevel: NaverAdsServices.GFPLogLevel) -> Swift.String
  @objc(logMessage:method:logLevel:debugMode:) public static func objcLog(_ message: Any, _ method: Any, logLevel: NaverAdsServices.GFPLogLevel, debugMode: Swift.Bool)
  public static func log(_ message: Any, _ method: Any, _ arguments: [Any], logLevel: NaverAdsServices.GFPLogLevel, _ debugMode: Swift.Bool = false)
  @objc deinit
}
extension NaverAdsServices.GFPLog {
  public static func trace(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func debug(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func info(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func error(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func critical(_ message: Any, _ method: Any = #function, _ arguments: Any...)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPBundleUtils : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NaverAdsServices.GFPBundleUtils
  @objc public static var appVersion: Swift.String {
    @objc get
  }
  @objc public static var appName: Swift.String {
    @objc get
  }
  @objc public static var identifier: Swift.String {
    @objc get
  }
  @objc public func skAdNetworkList() -> [Swift.String]
  @objc override dynamic public init()
  @objc public func setup()
  @objc public class func isExistImage(bundle: Foundation.Bundle?, name: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc extension Foundation.NSDictionary {
  @objc(objectWithKey:) dynamic public func object(key: Any?) -> Any?
  @objc(objectWithKey:returnType:) dynamic public func object(key: Any?, classType: Swift.AnyClass) -> Any?
  @objc(boolWithKey:) dynamic public func bool(key: Any?) -> Swift.Bool
  @objc(isEmpty:) dynamic public class func isEmpty(dict: Foundation.NSDictionary?) -> Swift.Bool
}
@objc public protocol GFPErrorCodeProviderDelegate {
  @objc func errorCodeNameDict() -> [Swift.Int : Swift.String]
  @objc func errorDomain() -> Swift.String
  @objc func errorMessageKey() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPError : Foundation.NSError {
  @objc public static var errorMessageKey: Swift.String {
    @objc get
  }
  @objc weak public static var delegate: (any NaverAdsServices.GFPErrorCodeProviderDelegate)?
  @objc convenience public init(code: Swift.Int)
  @objc convenience public init(code: Swift.Int, userInfo: [Swift.String : Any]?)
  @objc public class func error(withCode code: Swift.Int, userInfo dict: [Swift.String : Any]?) -> NaverAdsServices.GFPError
  @objc public func codeName() -> Swift.String?
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class GFPUADeviceInfo : ObjectiveC.NSObject {
  @objc public var systemVersion: Swift.String
  @objc public var deviceType: Swift.String
  @objc(initWith:deviceType:) public init(_ aSystemVersion: Swift.String, deviceType aDeviceType: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPServiceInfo : ObjectiveC.NSObject {
  @objc public var appName: Swift.String
  @objc public var appVersion: Swift.String
  @objc override dynamic public init()
  @objc public static func create() -> NaverAdsServices.GFPServiceInfo
  @objc public var dict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc public var appVersionDict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPDeviceInfo : ObjectiveC.NSObject {
  @objc public var uaInfo: NaverAdsServices.GFPUADeviceInfo
  @objc public var serviceInfo: NaverAdsServices.GFPServiceInfo
  @objc public var systemName: Swift.String {
    get
  }
  @objc public var systemVersion: Swift.String {
    get
  }
  @objc public var sdkVersion: Swift.String? {
    get
  }
  @objc public var deviceType: Swift.String {
    get
  }
  @objc public var deviceModel: Swift.String {
    get
  }
  @objc public var bundleIdentifier: Swift.String {
    get
  }
  @objc public var appName: Swift.String {
    @objc get
  }
  @objc public var appVersion: Swift.String {
    @objc get
  }
  @objc public var sdkName: Swift.String {
    @objc get
  }
  @objc public var os: Swift.String {
    @objc get
  }
  @objc public var density: Swift.String {
    @objc get
  }
  @objc public var screenWidth: Swift.String {
    @objc get
  }
  @objc public var screenHeight: Swift.String {
    @objc get
  }
  @objc public var locale: Swift.String? {
    @objc get
  }
  @objc public var networkType: Swift.String {
    @objc get
  }
  @objc convenience public init(_ version: Swift.String)
  @objc override dynamic public init()
  @objc public var dict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc public var initializeDict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPMergeUtils : ObjectiveC.NSObject {
  public class func genericMerge<T>(array1: [T], array2: [T]) -> [T]
  @objc(mergeWithArray1:array2:) public class func merge(array1: [Any], array2: [Any]) -> [Any]
  @objc public class func merge(dict1: [Swift.String : [Swift.String]], dict2: [Swift.String : [Swift.String]]) -> [Swift.String : [Swift.String]]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPSizeUtils : ObjectiveC.NSObject {
  @objc(isSquareWith:) public class func isSquare(_ size: CoreFoundation.CGSize) -> Swift.Bool
  @objc(ratioWith:) public class func ratio(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  @objc(isContainsNaN:) public class func isContainsNaN(_ size: CoreFoundation.CGSize) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPRectUtils : ObjectiveC.NSObject {
  @objc(isContainsNaN:) public class func isContainsNaN(_ rect: CoreFoundation.CGRect) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.String {
  public func encodingSubStringFrom(_ aIndex: Swift.Int) -> Swift.String?
  public func encodingSubStringFrom(_ aIndex: Swift.String.Index) -> Swift.String?
  public func encodingSubStringTo(_ aIndex: Swift.Int) -> Swift.String?
  public func encodingSubStringTo(_ aIndex: Swift.String.Index) -> Swift.String?
  public func isStringNumeric() -> Swift.Bool
}
@objc extension Foundation.NSString {
  @objc dynamic public func encodingSubStringFrom(aIndex: Swift.Int) -> Foundation.NSString?
  @objc dynamic public func encodingSubStringTo(aIndex: Swift.Int) -> Foundation.NSString?
  @objc dynamic public func isStringNumeric() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPStringUtils : ObjectiveC.NSObject {
  @objc(isValidUDID:) public class func isValidUDID(adID: Swift.String?) -> Swift.Bool
  @objc public class func whiteSpaceTrimWith(_ aString: Swift.String?) -> Swift.String?
  @objc public class func whiteSpaceNewLineTrimWith(_ aString: Swift.String?) -> Swift.String?
  @objc public class func hasLengthWhiteSpaceTrimWith(_ aString: Swift.String?) -> Swift.Bool
  @objc(isEmptyWith:) public class func isEmpty(_ aString: Swift.String?) -> Swift.Bool
  @objc public class func encodeByAddingPercentEscapesWith(_ aString: Swift.String?) -> Swift.String?
  @objc public class func queryComponentsWith(_ aString: Swift.String?) -> Swift.Dictionary<Swift.String, Swift.String>?
  @objc public class func isValidTimeFormatString(_ timeString: Swift.String?) -> Swift.Bool
  @objc public class func isValidPercentFormatString(_ percentString: Swift.String?) -> Swift.Bool
  @objc public class func isValidTimeOrPercentFormatString(_ aString: Swift.String?) -> Swift.Bool
  @objc public class func filterJsonStringWith(_ dictionary: Swift.Dictionary<Swift.AnyHashable, Any>?) -> Swift.String
  @objc public class func jsonStringWith(_ dictionary: Swift.Dictionary<Swift.AnyHashable, Any>?) -> Swift.String
  @objc public class func filterHostMetaWith(_ aDict: Swift.Dictionary<Swift.AnyHashable, Any>?) -> Swift.Dictionary<Swift.AnyHashable, Any>
  @objc public class func hasHttpPrefix(_ url: Swift.String?) -> Swift.Bool
  @objc public class func convertWith(_ object: Any?) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPDeviceLocInfo : ObjectiveC.NSObject {
  @objc public var latitude: Swift.String
  @objc public var longitude: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPDeviceUtils : ObjectiveC.NSObject {
  @objc public static var preferredLanguageCode: Swift.String? {
    @objc get
  }
  @objc public static var getDeviceCountryCode: Swift.String? {
    @objc get
  }
  @objc public static var localeIdentifier: Swift.String? {
    @objc get
  }
  @objc public static var isStatusBarLandscape: Swift.Bool {
    @objc get
  }
  @objc public static var isIPad: Swift.Bool {
    @objc get
  }
  @objc public static var systemName: Swift.String {
    @objc get
  }
  @objc public static var systemVer: Swift.String {
    @objc get
  }
  @objc public static var deviceModel: Swift.String {
    @objc get
  }
  @objc public static var screenRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc public static var nativeScaleFactor: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var isSKAdNetworkAvaliable: Swift.Bool {
    @objc get
  }
  @objc public static func getLocationInfo() -> NaverAdsServices.GFPDeviceLocInfo?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension Foundation.Timer {
  @objc public static let kAttachedCheckDefaultFrequency: Swift.Double
  @objc dynamic public class func scheduledTimer(timeInterval: Foundation.TimeInterval, block: @escaping () -> Swift.Void, repeats: Swift.Bool) -> Foundation.Timer
  @objc dynamic public class func scheduledTimer(timeInterval: Foundation.TimeInterval, block: @escaping () -> Swift.Void, repeats: Swift.Bool, mode: Foundation.RunLoop.Mode) -> Foundation.Timer
}
public struct GFPWebViewAppEnvSkadn : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GFPWebViewAppEnvDevice : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GFPWebViewAppEnvironment : Swift.Codable {
  public var sdkName: Swift.String {
    get
  }
  public var sdkVersion: Swift.String {
    get
  }
  public var limitAdTracking: Swift.Bool {
    get
  }
  public var adid: Swift.String? {
    get
  }
  public var nac: Swift.String? {
    get
  }
  public var device: NaverAdsServices.GFPWebViewAppEnvDevice? {
    get
  }
  public var appVersion: Swift.String {
    get
  }
  public var skadn: NaverAdsServices.GFPWebViewAppEnvSkadn? {
    get
  }
  public init(sdkName: Swift.String, sdkVersion: Swift.String, limitAdTracking: Swift.Bool, adId: Swift.String? = nil, nac: Swift.String? = nil, device: NaverAdsServices.GFPWebViewAppEnvDevice? = nil)
  public init?()
  public func jsonString() -> Swift.String?
  public static var nac: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol GFPWebViewAppEnvDelegate {
  @objc var web_env_sdkVersion: Swift.String { get }
  @objc var web_env_sdkName: Swift.String { get }
  @objc var web_env_limitAdTracking: Swift.Bool { get }
  @objc var web_env_adId: Swift.String? { get }
  @objc var web_env_nac: Swift.String? { get }
  @objc func web_env_updateNac(nac: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPWebViewManager : ObjectiveC.NSObject {
  @objc public static let shared: NaverAdsServices.GFPWebViewManager
  @objc weak public var delegate: (any NaverAdsServices.GFPWebViewAppEnvDelegate)? {
    get
  }
  @objc public static func registerDelegate(_ delegate: (any NaverAdsServices.GFPWebViewAppEnvDelegate)?)
  @objc public static func registerWebView(_ webView: WebKit.WKWebView)
  @objc public static func examineWebViewStatus(webView: WebKit.WKWebView, result: @escaping ((any Swift.Error)?, [Swift.String : Any]?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension NaverAdsServices.GFPWebViewManager : WebKit.WKScriptMessageHandlerWithReply {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage, replyHandler: @escaping @_Concurrency.MainActor (Any?, Swift.String?) -> Swift.Void)
}
extension NaverAdsServices.GFPNetworkType : Swift.Equatable {}
extension NaverAdsServices.GFPNetworkType : Swift.Hashable {}
extension NaverAdsServices.GFPNetworkType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPCellularType : Swift.Equatable {}
extension NaverAdsServices.GFPCellularType : Swift.Hashable {}
extension NaverAdsServices.GFPCellularType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPAlignmentCenter : Swift.Equatable {}
extension NaverAdsServices.GFPAlignmentCenter : Swift.Hashable {}
extension NaverAdsServices.GFPAlignmentCenter : Swift.RawRepresentable {}
extension NaverAdsServices.GFPSizeType : Swift.Equatable {}
extension NaverAdsServices.GFPSizeType : Swift.Hashable {}
extension NaverAdsServices.GFPSizeType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPOriginType : Swift.Equatable {}
extension NaverAdsServices.GFPOriginType : Swift.Hashable {}
extension NaverAdsServices.GFPOriginType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPHexCodeType : Swift.Equatable {}
extension NaverAdsServices.GFPHexCodeType : Swift.Hashable {}
extension NaverAdsServices.GFPHexCodeType : Swift.RawRepresentable {}
