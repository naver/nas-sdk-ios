// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NaverAdsServices
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AdSupport
import CoreLocation
import CoreTelephony
import Foundation
@_exported import NaverAdsServices
import Network
import OSLog
import QuartzCore
import StoreKit
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public protocol NASVastMacroDataSource : ObjectiveC.NSObjectProtocol {
  @objc func getCurrentMediaTimeString() -> Swift.String?
  @objc func getUserAgent() -> Swift.String?
  @objc func getUniversalAdId() -> Swift.String?
  @objc func getPodSequence() -> Swift.String?
  @objc func getAssetURI() -> Swift.String?
}
public enum NASVASTMacro : Swift.String, Swift.CaseIterable {
  case IFA
  case IFATYPE
  case LIMITADTRACKING
  case DEVICEUA
  case SERVERSIDE
  case TIMESTAMP
  case CACHEBUSTING
  case RANDOM
  case RANDOM_LOWERCASE
  case ASSETURI
  case ADPLAYHEAD
  case UNIVERSALADID
  case PODSEQUENCE
  case ADTYPE
  case ERRORCODE
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NaverAdsServices.NASVASTMacro]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [NaverAdsServices.NASVASTMacro] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastMacroHelper : ObjectiveC.NSObject {
  @objc weak public var macroDataSource: (any NaverAdsServices.NASVastMacroDataSource)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPTimeUtils : ObjectiveC.NSObject {
  @objc public class var currentUptime: Foundation.NSNumber {
    @objc get
  }
  @objc public class func convertTimeFormatString(_ timeString: Swift.String?) -> Foundation.TimeInterval
  @objc(convertTimeOrPercentFormatString:withDurationTimeInterval:) public class func convertTimeOrPercentFormatString(_ timeString: Swift.String?, durationTimeInterval: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc public class func secondFromTimeInterval(_ timeInterval: Foundation.TimeInterval) -> Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPViewUtils : ObjectiveC.NSObject {
  @objc public class func removeSubviews(_ aView: UIKit.UIView?)
  @objc public class func originalFrame(_ aView: UIKit.UIView?) -> CoreFoundation.CGRect
  @objc public class func isVisibility(_ aView: UIKit.UIView?) -> Swift.Bool
  @objc public class func isViewableOnScreen(_ aView: UIKit.UIView?) -> Swift.Bool
  @objc public class func isTouchedOnScreenCenter(_ aView: UIKit.UIView) -> Swift.Bool
  @objc public class func isAtLeastHalfViewable(_ aView: UIKit.UIView?) -> Swift.Bool
  @objc public class func exposedPercentage(_ aView: UIKit.UIView?) -> CoreFoundation.CGFloat
  @objc public class func visibleRectangle(_ aView: UIKit.UIView?) -> CoreFoundation.CGRect
  @objc public class func fillSuperviewWithCenterAlignment(_ aView: UIKit.UIView?)
  @objc(setConstraintWithFrameSize:) public class func setConstraint(_ aView: UIKit.UIView?)
  @objc(setConstraintWithSize:view:) public class func setConstraint(_ size: CoreFoundation.CGSize, view: UIKit.UIView?)
  @objc public class func matchSuperViewSize(_ aView: UIKit.UIView?)
  @objc public class func matchSuperViewSafetyAreaThroughConstraints(_ aView: UIKit.UIView?)
  @objc public class func arrangeToSuperviewWithXAttribute(_ xAttribute: UIKit.NSLayoutConstraint.Attribute, yAttribute: UIKit.NSLayoutConstraint.Attribute, view: UIKit.UIView?)
  @objc public class func arrangeToSuperviewWithXAttribute(_ xAttribute: UIKit.NSLayoutConstraint.Attribute, yAttribute: UIKit.NSLayoutConstraint.Attribute, offsetX: CoreFoundation.CGFloat, offsetY: CoreFoundation.CGFloat, view: UIKit.UIView?)
  @objc public class func arrangeToSuperViewApplyingSafeAreaWithXAttribute(_ xAttribute: UIKit.NSLayoutConstraint.Attribute, yAttribute: UIKit.NSLayoutConstraint.Attribute, offsetX: CoreFoundation.CGFloat, offsetY: CoreFoundation.CGFloat, view: UIKit.UIView?)
  @objc public class func removeSizeConstraintOnSuperview(_ aView: UIKit.UIView?)
  @objc public class func removeSizeConstraintOnSuperviewLayoutGuide(_ aView: UIKit.UIView?)
  @objc public class func removeArrangeConstraintsOnSuperview(_ aView: UIKit.UIView?)
  @objc public class func removeArrangeConstraintsOnSuperviewSafeLayoutGuide(_ aView: UIKit.UIView?)
  @objc public class func removeSizeConstraintOnSelf(_ aView: UIKit.UIView?)
  @objc public class func hideViewWhileTouchable(view: UIKit.UIView?)
  @objc public class func hideViewWhileTouchable(label: UIKit.UILabel?)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GFPNetworkType : Swift.Int {
  case Unknown
  case Ethernet
  case Wifi
  case Cellular
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPCellularType : Swift.Int {
  case Unknown
  case G2
  case G3
  case G4
  case G5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPNetworkUtils : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NaverAdsServices.GFPNetworkUtils
  @objc public var info: Swift.Dictionary<Swift.String, Swift.Int>?
  @objc public var networkType: NaverAdsServices.GFPNetworkType {
    @objc get
  }
  @objc public var cellularType: NaverAdsServices.GFPCellularType {
    @objc get
  }
  @objc public static var isWIFI: Swift.Bool {
    @objc get
  }
  @objc public static var networkTypeDescForInit: Swift.String {
    @objc get
  }
  @objc public static var networkTypeDescForAdcall: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GFPAlignmentCenter : Swift.Int {
  case vertical = 0
  case horizontal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPSizeType : Swift.Int {
  case height = 0
  case width
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPOriginType : Swift.Int {
  case x = 0
  case y
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPHexCodeType : Swift.Int {
  case rgba
  case argb
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension UIKit.UIColor {
  @objc(colorWithRGBIntWith:) dynamic public class func gfpColor(rgbInt: Swift.UInt64) -> UIKit.UIColor
  @objc(colorWithRGBIntWith:alpha:) dynamic public class func gfpColor(rgbInt: Swift.UInt64, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor
  @objc(colorWithRedWith:green:blue:alpha:) dynamic public class func gfpColor(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor
  @objc(colorWithHexStringWith:) dynamic public class func gfpColor(hexString: Swift.String) -> UIKit.UIColor?
  @objc(colorWithHexStringWith:type:) dynamic public class func gfpColor(hexString: Swift.String, type: NaverAdsServices.GFPHexCodeType = .rgba) -> UIKit.UIColor?
}
@objc extension UIKit.UIView {
  @objc(frameWith:) @_Concurrency.MainActor @preconcurrency dynamic public class func frame(_ frame: CoreFoundation.CGRect) -> Swift.String
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func printSize(functionName: [Swift.CChar])
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func printOrigin(functionName: [Swift.CChar])
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sideSafeAreaInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sizeWidth() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sizeHeight() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func leftSafeInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func rightSafeInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func topSafeInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func topBottomSafeAreaInsets() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func maxY() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func maxX() -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showDebugBorderWithColorWith(color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addConstraintCenterWith(aItem: UIKit.UIView?, toItem: UIKit.UIView?, attribute: UIKit.NSLayoutConstraint.Attribute)
  @objc(moveWith:) @_Concurrency.MainActor @preconcurrency dynamic public func moveWith(type: NaverAdsServices.GFPAlignmentCenter)
  @objc(moveWith:margin:) @_Concurrency.MainActor @preconcurrency dynamic public func moveWith(type: NaverAdsServices.GFPAlignmentCenter, margin: CoreFoundation.CGFloat)
  @objc(moveToTypeWith:margin:) @_Concurrency.MainActor @preconcurrency dynamic public func moveToTypeWith(type: NaverAdsServices.GFPAlignment, margin: CoreFoundation.CGFloat)
  @objc(moveToTypeWith:withView:gap:) @_Concurrency.MainActor @preconcurrency dynamic public func moveToTypeWith(type: NaverAdsServices.GFPAlignment, view: UIKit.UIView?, gap: CoreFoundation.CGFloat)
  @objc(alignWith:withView:) @_Concurrency.MainActor @preconcurrency dynamic public func alignWith(type: NaverAdsServices.GFPAlignment, view: UIKit.UIView?)
  @objc(alignWith:withView:gap:) @_Concurrency.MainActor @preconcurrency dynamic public func alignWith(type: NaverAdsServices.GFPAlignment, view: UIKit.UIView?, gap: CoreFoundation.CGFloat)
  @objc(alignCenterWith:withView:) @_Concurrency.MainActor @preconcurrency dynamic public func alignCenter(type: NaverAdsServices.GFPAlignmentCenter, view: UIKit.UIView?)
  @objc(alignCenterWith:withView:gap:) @_Concurrency.MainActor @preconcurrency dynamic public func alignCenter(type: NaverAdsServices.GFPAlignmentCenter, view: UIKit.UIView?, gap: CoreFoundation.CGFloat)
  @objc(updateSizeWith:value:) @_Concurrency.MainActor @preconcurrency dynamic public func updateSizeWith(type: NaverAdsServices.GFPSizeType, value: CoreFoundation.CGFloat)
  @objc(updateSizeWith:) @_Concurrency.MainActor @preconcurrency dynamic public func updateSizeWith(aSize: CoreFoundation.CGSize)
  @objc(updateOriginWith:) @_Concurrency.MainActor @preconcurrency dynamic public func updateOriginWith(aOrigin: CoreFoundation.CGPoint)
  @objc(updateOriginTypeWith:value:) @_Concurrency.MainActor @preconcurrency dynamic public func updateOriginTypeWith(aType: NaverAdsServices.GFPOriginType, aValue: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func enableAccessibilityForImageSubviews()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func disableAccessibilityForImageSubviews()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func disableAccessibilityForSubviews()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func loadWithBundle(aBundle: Foundation.Bundle?, nibName: Swift.String?) -> UIKit.UIView?
}
@objc extension UIKit.UIImageView {
  @objc(startSpinningWith:) @_Concurrency.MainActor @preconcurrency dynamic public func startSpinningWith(duration: Swift.Double)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func stopSpinning()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func imageWithImage(image: UIKit.UIImage?, scaleSize: CoreFoundation.CGSize) -> UIKit.UIImage?
}
@objc public enum GFPVastIconType : Swift.Int {
  case provider = 0
  case postAdAleart = 1
  case iconSearchKeyword = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class GFPNASVastControlInfo : ObjectiveC.NSObject {
  @objc public var isSkippable: Swift.Bool
  @objc public var skipOffset: Foundation.TimeInterval
  @objc public var duration: Foundation.TimeInterval
  @objc public var iconList: [NaverAdsServices.GFPVastIcon]
  @objc public init(skipOffset: Swift.String, duration: Foundation.TimeInterval, skipInfo: NaverAdsServices.GFPVastAdSkipInfo?, iconList: [NaverAdsServices.GFPVastIcon])
  @objc public func adChoiceIcon() -> NaverAdsServices.GFPVastIcon?
  @objc public func providerIcon() -> NaverAdsServices.GFPVastIcon?
  @objc public func postAdAlertIcon() -> NaverAdsServices.GFPVastIcon?
  @objc public func canShow(iconType: NaverAdsServices.GFPVastIconType, currentTime: Foundation.TimeInterval) -> Swift.Bool
  @objc public func canShowKeywords(_ currentTime: Foundation.TimeInterval) -> Swift.Bool
  @objc deinit
}
public typealias ImageDownloadCompletionHandler = (UIKit.UIImage?, Foundation.URL?, Foundation.NSError?) -> Swift.Void
public typealias DownloadCompletionHandler = (Foundation.Data?, Foundation.URL?, Foundation.NSError?) -> Swift.Void
public typealias ImageCompletionHandler = (UIKit.UIImage?, Foundation.NSError?) -> Swift.Void
public typealias ImageFullCompletionHandler = (UIKit.UIImage?, Foundation.URL?, Foundation.NSError?) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPDownloadCache : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NaverAdsServices.GFPDownloadCache
  @objc public func urlToNSURL(_ url: Foundation.URL) -> Foundation.NSURL?
  @objc public func isInvalidURL(_ url: Foundation.URL) -> Swift.Bool
  @objc public func updateDataWithURL(_ url: Foundation.URL)
  @objc public func imageWithURL(_ url: Foundation.URL) -> UIKit.UIImage?
  @objc public func dataWithURL(_ url: Foundation.URL, completion: @escaping NaverAdsServices.DownloadCompletionHandler)
  @objc public func dataWithURL(_ url: Foundation.URL, timeoutInterval: Foundation.TimeInterval, completion: @escaping NaverAdsServices.DownloadCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, completion: @escaping NaverAdsServices.ImageCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, fullCompletion: @escaping NaverAdsServices.ImageFullCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, timeoutInterval: Foundation.TimeInterval, fullCompletion: @escaping NaverAdsServices.ImageFullCompletionHandler)
  @objc public func imageWithURL(_ url: Foundation.URL, timeoutInterval: Foundation.TimeInterval, completion: @escaping NaverAdsServices.ImageDownloadCompletionHandler)
  @objc public func clearCache()
  @objc deinit
}
@objc public protocol SKStoreViewControllerCloseDelegate {
  @objc func storeViewControllerClosed()
}
@objc extension StoreKit.SKStoreProductViewController {
  @objc @_Concurrency.MainActor @preconcurrency public static var canUse: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class func canUseStoreProduct() -> Swift.Bool
}
@objc @objcMembers public class GFPStoreProductHelper : ObjectiveC.NSObject, StoreKit.SKStoreProductViewControllerDelegate {
  @objc weak public var closeDelegate: (any NaverAdsServices.SKStoreViewControllerCloseDelegate)?
  @objc public init(target: UIKit.UIViewController, parameters: [Swift.String : Any])
  @objc public func isLoadProductEnabled() -> Swift.Bool
  @objc public func loadProductWith(_ completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func productViewControllerDidFinish(_ viewController: StoreKit.SKStoreProductViewController)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPURLUtils : ObjectiveC.NSObject {
  @objc public class func paramValueForKey(_ key: Swift.String, inURL: Foundation.URL) -> Swift.String?
  @objc public class func URLWithString(_ aUrlString: Swift.String) -> Foundation.URL?
  @objc public class func encodingURIComponent(_ string: Swift.String) -> Swift.String?
  @objc public class func URLWithBaseString(_ baseStr: Swift.String, queryItems: [Foundation.NSURLQueryItem]) -> Foundation.URL?
  @objc public class func canOpenURL(_ aUrl: Foundation.URL?) -> Swift.Bool
  @objc public class func hasHttpPrefix(_ url: Foundation.URL) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension NaverAdsServices.GFPLogLevel : Swift.Comparable {
  public static func < (lhs: NaverAdsServices.GFPLogLevel, rhs: NaverAdsServices.GFPLogLevel) -> Swift.Bool
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(GFPLog) public class GFPLog : ObjectiveC.NSObject {
  @objc(sharedInstance) public static let shared: NaverAdsServices.GFPLog
  @objc(logLevel) public var logLevel: NaverAdsServices.GFPLogLevel {
    @objc get
    @objc set
  }
  @objc(hasLogLevel) public var hasLogLevel: Swift.Bool {
    @objc get
  }
  @objc(logLevelDesc) public var logLevelDesc: Swift.String {
    @objc get
  }
  @objc(logIdentifier) public static var logIdentifier: Swift.String {
    @objc get
  }
  @objc(logLevelDescWith:) public static func logLevelDescription(logLevel: NaverAdsServices.GFPLogLevel) -> Swift.String
  @objc(logMessage:method:logLevel:debugMode:) public static func objcLog(_ message: Any, _ method: Any, logLevel: NaverAdsServices.GFPLogLevel, debugMode: Swift.Bool)
  public static func log(_ message: Any, _ method: Any, _ arguments: [Any], logLevel: NaverAdsServices.GFPLogLevel, _ debugMode: Swift.Bool = false)
  @objc deinit
}
extension NaverAdsServices.GFPLog {
  public static func trace(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func debug(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func info(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func error(_ message: Any, _ method: Any = #function, _ arguments: Any...)
  public static func critical(_ message: Any, _ method: Any = #function, _ arguments: Any...)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPBundleUtils : ObjectiveC.NSObject {
  @objc public static let sharedInstance: NaverAdsServices.GFPBundleUtils
  @objc public static var appVersion: Swift.String {
    @objc get
  }
  @objc public static var appName: Swift.String {
    @objc get
  }
  @objc public static var identifier: Swift.String {
    @objc get
  }
  @objc public func skAdNetworkList() -> [Swift.String]
  @objc override dynamic public init()
  @objc public func setup()
  @objc public class func isExistImage(bundle: Foundation.Bundle?, name: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc extension Foundation.NSDictionary {
  @objc(objectWithKey:) dynamic public func object(key: Any?) -> Any?
  @objc(objectWithKey:returnType:) dynamic public func object(key: Any?, classType: Swift.AnyClass) -> Any?
  @objc(boolWithKey:) dynamic public func bool(key: Any?) -> Swift.Bool
  @objc(isEmpty:) dynamic public class func isEmpty(dict: Foundation.NSDictionary?) -> Swift.Bool
}
@objc public protocol GFPErrorCodeProviderDelegate {
  @objc func errorCodeNameDict() -> [Swift.Int : Swift.String]
  @objc func errorDomain() -> Swift.String
  @objc func errorMessageKey() -> Swift.String
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPError : Foundation.NSError {
  @objc public static var errorMessageKey: Swift.String {
    @objc get
  }
  @objc weak public static var delegate: (any NaverAdsServices.GFPErrorCodeProviderDelegate)?
  @objc convenience public init(code: Swift.Int)
  @objc convenience public init(code: Swift.Int, userInfo: [Swift.String : Any]?)
  @objc public class func error(withCode code: Swift.Int, userInfo dict: [Swift.String : Any]?) -> NaverAdsServices.GFPError
  @objc public func codeName() -> Swift.String?
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class GFPUADeviceInfo : ObjectiveC.NSObject {
  @objc public var systemVersion: Swift.String
  @objc public var deviceType: Swift.String
  @objc(initWith:deviceType:) public init(_ aSystemVersion: Swift.String, deviceType aDeviceType: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPServiceInfo : ObjectiveC.NSObject {
  @objc public var appName: Swift.String
  @objc public var appVersion: Swift.String
  @objc override dynamic public init()
  @objc public static func create() -> NaverAdsServices.GFPServiceInfo
  @objc public var dict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc public var appVersionDict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPDeviceInfo : ObjectiveC.NSObject {
  @objc public var uaInfo: NaverAdsServices.GFPUADeviceInfo
  @objc public var serviceInfo: NaverAdsServices.GFPServiceInfo
  @objc public var systemName: Swift.String {
    get
  }
  @objc public var systemVersion: Swift.String {
    get
  }
  @objc public var sdkVersion: Swift.String? {
    get
  }
  @objc public var deviceType: Swift.String {
    get
  }
  @objc public var deviceModel: Swift.String {
    get
  }
  @objc public var bundleIdentifier: Swift.String {
    get
  }
  @objc public var appName: Swift.String {
    @objc get
  }
  @objc public var appVersion: Swift.String {
    @objc get
  }
  @objc public var sdkName: Swift.String {
    @objc get
  }
  @objc public var os: Swift.String {
    @objc get
  }
  @objc public var density: Swift.String {
    @objc get
  }
  @objc public var screenWidth: Swift.String {
    @objc get
  }
  @objc public var screenHeight: Swift.String {
    @objc get
  }
  @objc public var locale: Swift.String? {
    @objc get
  }
  @objc public var networkType: Swift.String {
    @objc get
  }
  @objc convenience public init(_ version: Swift.String)
  @objc override dynamic public init()
  @objc public var dict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc public var initializeDict: Swift.Dictionary<Swift.String, Swift.String> {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPMergeUtils : ObjectiveC.NSObject {
  public class func genericMerge<T>(array1: [T], array2: [T]) -> [T]
  @objc(mergeWithArray1:array2:) public class func merge(array1: [Any], array2: [Any]) -> [Any]
  @objc public class func merge(dict1: [Swift.String : [Swift.String]], dict2: [Swift.String : [Swift.String]]) -> [Swift.String : [Swift.String]]
  @objc deinit
}
@objc @objcMembers public class GFPVastAdSkipData : ObjectiveC.NSObject {
  @objc public init(dictionary: [Swift.String : Any])
  @objc deinit
}
@objc @objcMembers public class GFPVastAdSkipInfo : ObjectiveC.NSObject {
  @objc final public let useVastSkip: Swift.Bool
  @objc(initWithVastSkippable:data:) public init(vastSkippable: Swift.Bool, data: NaverAdsServices.GFPVastAdSkipData?)
  @objc public var skipMin: Foundation.TimeInterval {
    @objc get
  }
  @objc public var skipAfter: Foundation.TimeInterval {
    @objc get
  }
  @objc public var isValidSkip: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc public protocol GFPVastLoaderDelegate {
  @objc func vastLoader(_ vastLoader: NaverAdsServices.GFPVastLoader, didLoadVast vast: NaverAdsServices.GFPVast)
  @objc func vastLoader(_ vastLoader: NaverAdsServices.GFPVastLoader, didFailWithError error: (any Swift.Error)?)
}
@objc @objcMembers public class GFPVastLoader : ObjectiveC.NSObject {
  @objc public static let kVastTagTimeOutTimeInterval: Swift.Double
  @objc weak public var delegate: (any NaverAdsServices.GFPVastLoaderDelegate)?
  @objc weak public var macroDataSource: (any NaverAdsServices.NASVastMacroDataSource)?
  @objc public init(maxDirect: Swift.Int, vastTimeout: CoreFoundation.CFTimeInterval, skipInfo: NaverAdsServices.GFPVastAdSkipInfo?, dataSource: (any NaverAdsServices.NASVastMacroDataSource)?)
  @objc public func loadWith(vastString: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPSizeUtils : ObjectiveC.NSObject {
  @objc(isSquareWith:) public class func isSquare(_ size: CoreFoundation.CGSize) -> Swift.Bool
  @objc(ratioWith:) public class func ratio(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGFloat
  @objc(isContainsNaN:) public class func isContainsNaN(_ size: CoreFoundation.CGSize) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPRectUtils : ObjectiveC.NSObject {
  @objc(isContainsNaN:) public class func isContainsNaN(_ rect: CoreFoundation.CGRect) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastVideoClicks : ObjectiveC.NSObject {
  @objc public var clickThrough: NaverAdsServices.GFPVastImpression?
  @objc public var clickTracking: [NaverAdsServices.GFPVastImpression]
  @objc public var customClick: [NaverAdsServices.GFPVastImpression]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPVastExecutableResource : NaverAdsServices.GFPVastBaseAdverificationResource {
  @objc public var type: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPVastJavaScriptResource : NaverAdsServices.GFPVastBaseAdverificationResource {
  @objc public var browserOptional: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastBaseAdverificationResource : ObjectiveC.NSObject {
  @objc public var value: Swift.String?
  @objc public var apiFramework: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastAdParameters : ObjectiveC.NSObject {
  @objc public var metaData: Swift.String?
  public var xmlEncoded: Swift.Bool?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastLinear : ObjectiveC.NSObject {
  @objc public var duration: Swift.String?
  @objc public var mediaFiles: NaverAdsServices.GFPVastMediaFiles?
  @objc public var adParameters: NaverAdsServices.GFPVastAdParameters?
  @objc public var trackingEvents: [NaverAdsServices.GFPVastTracking]
  @objc public var videoClicks: NaverAdsServices.GFPVastVideoClicks?
  @objc public var icons: [NaverAdsServices.GFPVastIcon]?
  @objc public var skipOffset: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastCreative : ObjectiveC.NSObject {
  @objc public var universalAdId: NaverAdsServices.GFPVastUniversalAdId?
  @objc public var creativeExtensions: [NaverAdsServices.GFPVastExtension]
  @objc public var linear: NaverAdsServices.GFPVastLinear?
  @objc public var nonLinearAds: NaverAdsServices.GFPVastNonLinearAds?
  @objc public var companionAds: NaverAdsServices.GFPVastCompanionAds?
  @objc public var id: Swift.String?
  @objc public var adId: Swift.String?
  public var sequence: Swift.Int?
  @objc public var apiFramework: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GFPVastInteractiveCreativeFile : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastCategory : ObjectiveC.NSObject {
  @objc public var categoryCode: Swift.String?
  @objc public var authority: Swift.String?
  @objc deinit
}
@objc public enum GFPExtensionCreativeType : Swift.Int {
  case none = 0
  case nonLinear = 1
  case loudness = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastExtension : ObjectiveC.NSObject {
  @objc public static let kNASLoudnessNormalization: Swift.String
  @objc public static let kNASNonLinearRemind: Swift.String
  @objc public static let kNASLoudnessEnbaleKey: Swift.String
  @objc public static let kNASLoudnessVersionKey: Swift.String
  @objc public static let kNASLoudnessContentKey: Swift.String
  @objc public static let kNASLoudnessContentTypeKey: Swift.String
  @objc public static let kNASLoudnessDataKey: Swift.String
  @objc public static let kNASLoudnessPropertiesKey: Swift.String
  @objc public var value: Swift.String?
  @objc public var type: Swift.String?
  @objc public var name: Swift.String?
  @objc public var creativeDict: [Swift.String : Any]
  @objc public var creativeType: NaverAdsServices.GFPExtensionCreativeType
  @objc public var loudness: NaverAdsServices.GFPNASLoudnessNormalization?
  @objc public var nonLinear: NaverAdsServices.GFPNasNonLinearRemind?
  @objc deinit
}
@objc public enum GFPNASLoudnessMode : Swift.Int {
  case gaudio = 0
  case transparent = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class GFPNASLoudnessProperties : ObjectiveC.NSObject {
  @objc public var targetLoudness: Swift.Float
  @objc public var mode: NaverAdsServices.GFPNASLoudnessMode
  @objc public init(propertyDict: [Swift.String : Swift.String])
  @objc deinit
}
@objc @objcMembers public class GFPNASLoudnessNormalization : ObjectiveC.NSObject {
  @objc public var enabled: Swift.Bool
  @objc public var version: Swift.String
  @objc public var contentType: Swift.String
  @objc public var contentEncoding: Swift.String
  @objc public var dataString: Swift.String
  @objc public var referDict: [Swift.String : Any] {
    @objc get
  }
  @objc public init?(loudnessDict: [Swift.String : Swift.String]?)
  @objc deinit
}
@objc @objcMembers public class GFPNasNonLinearRemind : ObjectiveC.NSObject {
  @objc public var targetID: Swift.String
  @objc public var offset: Swift.Int
  @objc public var duration: Foundation.TimeInterval
  @objc public var isplayOnce: Swift.Bool
  @objc public init?(nonLinearDict: [Swift.String : Swift.String]?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastMediaFile : ObjectiveC.NSObject {
  @objc public var value: Swift.String?
  @objc public var url: Foundation.URL?
  @objc public var deliveryType: Swift.String? {
    @objc get
  }
  @objc public var type: Swift.String?
  @objc public var width: Swift.Float
  @objc public var height: Swift.Float
  @objc public var codec: Swift.String?
  @objc public var mediaFileId: Swift.String?
  @objc public var bitrate: Swift.String?
  @objc public var maxBitrate: Swift.String?
  @objc public var minBitrate: Swift.String?
  public var scalable: Swift.Bool?
  public var maintainAspectRatio: Swift.Bool?
  @objc public var apiFramework: Swift.String?
  public var fileSize: Swift.Int?
  @objc public var mediaType: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastClosedCaptionFile : ObjectiveC.NSObject {
  @objc public var content: Swift.String?
  @objc public var mimeType: Swift.String?
  @objc public var language: Swift.String?
  @objc deinit
}
@objc public enum GFPVastRemindType : Swift.Int {
  case none = 0
  case banner = 1
  case text = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GFPVastResourceCode : Swift.Int {
  case none = 0
  case election = 1
  case providerNotice = 2
  case adProviderNotice = 3
  case alert = 4
  case searchKeyword = 5
  case adChoices = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class RemindCreativeTypes : ObjectiveC.NSObject {
  @objc public static let banner: [Swift.String]
  @objc public static let image: [Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastBaseResource : ObjectiveC.NSObject {
  @objc public var remindType: NaverAdsServices.GFPVastRemindType
  @objc public var content: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GFPVastStaticResource : NaverAdsServices.GFPVastBaseResource {
  @objc public var creativeType: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastAdSystem : ObjectiveC.NSObject {
  @objc public var adServerName: Swift.String?
  @objc public var version: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GFPVastSurvey : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastMediaFiles : ObjectiveC.NSObject {
  @objc public var mediaFiles: [NaverAdsServices.GFPVastMediaFile]?
  @objc public var mezzanine: [NaverAdsServices.GFPVastMezzanine]?
  @objc public var interactiveCreativeFile: [NaverAdsServices.GFPVastInteractiveCreativeFile]?
  @objc public var closedCaptionFiles: [NaverAdsServices.GFPVastClosedCaptionFile]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastInline : ObjectiveC.NSObject {
  @objc public var adSystem: NaverAdsServices.GFPVastAdSystem?
  @objc public var adTitle: Swift.String?
  @objc public var impressions: [NaverAdsServices.GFPVastImpression]
  @objc public var adServingId: Swift.String?
  @objc public var categories: [NaverAdsServices.GFPVastCategory]
  @objc public var inlineDescription: Swift.String?
  @objc public var advertiser: NaverAdsServices.GFPVastAdvertiser?
  @objc public var pricing: NaverAdsServices.GFPVastPricing?
  @objc public var survey: NaverAdsServices.GFPVastSurvey?
  @objc public var errors: [Swift.String]
  @objc public var extensions: [NaverAdsServices.GFPVastExtension]
  @objc public var viewableImpression: NaverAdsServices.GFPVastViewbleImpression?
  @objc public var adVerification: [NaverAdsServices.GFPVastAdVerification]
  @objc public var creatives: [NaverAdsServices.GFPVastCreative]
  public var expires: Swift.Int?
  @objc public var followAdditionalWrappers: Swift.Bool
  @objc public var allowMultipleAds: Swift.Bool
  public var fallbackOnNoAd: Swift.Bool?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastIcon : ObjectiveC.NSObject {
  @objc public var staticResource: NaverAdsServices.GFPVastStaticResource?
  @objc public var iframeResource: NaverAdsServices.GFPVastBaseResource?
  @objc public var htmlResource: NaverAdsServices.GFPVastBaseResource?
  @objc public var iconClicks: NaverAdsServices.GFPVastIconClicks?
  @objc public var iconViewTracking: [Swift.String]?
  @objc public var program: Swift.String?
  @objc public var width: Swift.String?
  @objc public var height: Swift.String?
  @objc public var xPosition: Swift.String?
  @objc public var yPosition: Swift.String?
  @objc public var duration: Swift.String?
  @objc public var offset: Swift.String?
  @objc public var apiFramework: Swift.String?
  @objc public var pxratio: Swift.String?
  @objc public var altText: Swift.String?
  @objc public var hoverText: Swift.String?
  @objc public var resourceValue: Swift.String?
  @objc public var resourceCode: NaverAdsServices.GFPVastResourceCode
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastViewbleImpression : ObjectiveC.NSObject {
  @objc public var viewable: [Swift.String]?
  @objc public var notViewable: [Swift.String]?
  @objc public var viewUndeterminded: [Swift.String]?
  @objc public var impressionId: Swift.String?
  @objc public func addImpressions(object: NaverAdsServices.GFPVastViewbleImpression?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastAd : ObjectiveC.NSObject {
  @objc public var vastInline: NaverAdsServices.GFPVastInline?
  @objc public var wrapper: NaverAdsServices.GFPVastWrapper?
  @objc public var id: Swift.String?
  public var sequence: Swift.Int?
  @objc public var podSequence: Swift.Int {
    @objc get
  }
  public var conditionalAd: Swift.Bool?
  @objc public var adTypeValue: Swift.String? {
    @objc get
  }
  @objc public var vastTrackingInfo: NaverAdsServices.GFPVastTrackingInfo?
  @objc public var vastControlInfo: NaverAdsServices.GFPNASVastControlInfo?
  @objc public func setUpVastControlInfo(skipInfo: NaverAdsServices.GFPVastAdSkipInfo?)
  @objc public func setUpVastTrackingInfo(macroHelper: NaverAdsServices.GFPVastMacroHelper) throws
  @objc public func setUpVastCompanionTrackingInfo(dataSource: (any NaverAdsServices.NASVastMacroDataSource)?) throws
  @objc public var mediaCreative: NaverAdsServices.GFPVastCreative? {
    @objc get
  }
  @objc public var videoDuration: Swift.Double {
    @objc get
  }
  @objc public var mediaFiles: NaverAdsServices.GFPVastMediaFiles? {
    @objc get
  }
  @objc public var creativeExtensions: [NaverAdsServices.GFPVastExtension] {
    @objc get
  }
  @objc public var loudness: [NaverAdsServices.GFPNASLoudnessNormalization] {
    @objc get
  }
  @objc public var nonLinearAds: NaverAdsServices.GFPVastNonLinearAds? {
    @objc get
  }
  @objc public var adVerifications: [NaverAdsServices.GFPVastAdVerification] {
    @objc get
  }
  @objc public var icons: [NaverAdsServices.GFPVastIcon] {
    @objc get
  }
  @objc public var companionAds: NaverAdsServices.GFPVastCompanionAds? {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GFPVastMezzanine : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVast : ObjectiveC.NSObject {
  @objc public var firstInlineAd: NaverAdsServices.GFPVastAd? {
    @objc get
  }
  @objc public var error: [Swift.String]
  @objc public var ads: [NaverAdsServices.GFPVastAd]
  @objc public var version: Swift.String?
  @objc public func mergeWithOther(vast: NaverAdsServices.GFPVast?, prevWrapperAd: NaverAdsServices.GFPVastAd?)
  @objc deinit
}
public enum GFPVastError : Swift.Error {
  case emptyValue(Swift.String)
  case invalidXML(Swift.String)
  case invalidValue(Swift.String)
  case wrapperNetworkError(Swift.String)
  case maxRedirectCountReached(Swift.String)
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastIconClicks : ObjectiveC.NSObject {
  @objc public var iconClickThrough: Swift.String?
  @objc public var iconClickTracking: [NaverAdsServices.GFPVastImpression]?
  @objc public var iconClickTrackingValues: [Swift.String]? {
    @objc get
  }
  @objc public var IconClickFallbackImages: [NaverAdsServices.GFPVastIconClickFallbackImage]?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastAdvertiser : ObjectiveC.NSObject {
  @objc public var name: Swift.String?
  @objc public var advertiserId: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastNonLinearAd : ObjectiveC.NSObject {
  @objc public var staticResource: NaverAdsServices.GFPVastStaticResource?
  @objc public var iframeResource: NaverAdsServices.GFPVastBaseResource?
  @objc public var htmlResource: NaverAdsServices.GFPVastBaseResource?
  @objc public var adParameters: NaverAdsServices.GFPVastAdParameters?
  @objc public var nonLinearClickThrough: Swift.String?
  @objc public var nonLinearClickTracking: [NaverAdsServices.GFPVastImpression]
  @objc public var ID: Swift.String?
  @objc public var width: Swift.Float
  @objc public var height: Swift.Float
  public var expandedWidth: Swift.Float?
  public var expandedHeight: Swift.Float?
  public var scaleable: Swift.Bool?
  public var maintainAspectRatio: Swift.Bool?
  @objc public var apiFramework: Swift.String?
  @objc public var minSuggestedDuration: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPNASVastCompanionAd : ObjectiveC.NSObject {
  @objc public var staticResources: [NaverAdsServices.GFPVastStaticResource]
  @objc public var iframeResources: [Swift.String]
  @objc public var htmlResources: [Swift.String]
  @objc public var adParameters: NaverAdsServices.GFPVastAdParameters?
  @objc public var altText: Swift.String?
  @objc public var companionClickThrough: Swift.String?
  @objc public var companionClickTrackings: [NaverAdsServices.GFPVastImpression]
  @objc public var trackingEvents: [NaverAdsServices.GFPVastTracking]
  @objc public var width: Swift.Float
  @objc public var height: Swift.Float
  @objc public var id: Swift.String?
  @objc public var assetWidth: Swift.String?
  @objc public var assetHeight: Swift.String?
  @objc public var expandedWidth: Swift.String?
  @objc public var expandedHeight: Swift.String?
  @objc public var apiFramework: Swift.String?
  @objc public var adSlotId: Swift.String?
  @objc public var pxratio: Swift.String?
  @objc public var renderingModeType: Swift.String? {
    @objc get
  }
  @objc public var vastTrackingInfo: NaverAdsServices.GFPVastTrackingInfo?
  @objc public func setUpVastCompanionTrackingInfo(dataSource: (any NaverAdsServices.NASVastMacroDataSource)?) throws
  @objc public func getBestScore(containerSize: CoreFoundation.CGSize) -> Swift.Float
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastWrapper : ObjectiveC.NSObject {
  @objc public var impressions: [NaverAdsServices.GFPVastImpression]
  @objc public var vastAdTagURI: Swift.String?
  @objc public var adSystem: NaverAdsServices.GFPVastAdSystem?
  @objc public var pricing: NaverAdsServices.GFPVastPricing?
  @objc public var errors: [Swift.String]
  @objc public var viewableImpression: NaverAdsServices.GFPVastViewbleImpression?
  @objc public var extensions: [NaverAdsServices.GFPVastExtension]
  @objc public var adVerifications: [NaverAdsServices.GFPVastAdVerification]
  @objc public var creatives: [NaverAdsServices.GFPVastCreative]
  @objc public var followAdditionalWrappers: Swift.Bool
  @objc public var allowMultipleAds: Swift.Bool
  public var fallbackOnNoAd: Swift.Bool?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastAdVerification : ObjectiveC.NSObject, NaverAdsServices.GFPOMIDInfoPresentable {
  @objc public var javaScriptResources: [NaverAdsServices.GFPVastJavaScriptResource]?
  @objc public var executableResources: [NaverAdsServices.GFPVastBaseAdverificationResource]?
  @objc public var trackingEvents: [NaverAdsServices.GFPVastTracking]?
  @objc public var vendor: Swift.String?
  @objc public var verificationUrl: Swift.String? {
    @objc get
  }
  @objc public var verificationParams: Swift.String?
  @objc public var verificationNotExecutedUrls: [Swift.String]? {
    @objc get
  }
  @objc public func isValid() -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastTracking : ObjectiveC.NSObject {
  @objc public var url: Swift.String?
  @objc public var eventName: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPProgressTrackingEvent : ObjectiveC.NSObject {
  @objc public var progressSeconds: Foundation.TimeInterval
  @objc public var eventURL: Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastTrackingInfo : ObjectiveC.NSObject {
  @objc public var duration: Foundation.TimeInterval
  @objc public var progressTrackingEvent: [NaverAdsServices.GFPProgressTrackingEvent]
  @objc public var errorTrackings: [Swift.String]
  @objc public var videoClicks: NaverAdsServices.GFPVastVideoClicks?
  @objc public func setMacroDataSource(_ macroDataSource: (any NaverAdsServices.NASVastMacroDataSource)?)
  @objc public func impressionEvent() -> [Swift.String]
  @objc public func clickTrackings() -> [Swift.String]
  @objc public func loaded() -> [Swift.String]
  @objc public func start() -> [Swift.String]
  @objc public func firstQuartile() -> [Swift.String]
  @objc public func midpoint() -> [Swift.String]
  @objc public func thirdQuartile() -> [Swift.String]
  @objc public func complete() -> [Swift.String]
  @objc public func skip() -> [Swift.String]
  @objc public func mute() -> [Swift.String]
  @objc public func unmute() -> [Swift.String]
  @objc public func pause() -> [Swift.String]
  @objc public func resume() -> [Swift.String]
  @objc public func rewind() -> [Swift.String]
  @objc public func otherAdInteraction() -> [Swift.String]
  @objc public func creativeView() -> [Swift.String]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastNonLinearAds : ObjectiveC.NSObject {
  @objc public var nonlinear: [NaverAdsServices.GFPVastNonLinearAd]
  @objc public var trackingEvents: [NaverAdsServices.GFPVastTracking]
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastCompanionAds : ObjectiveC.NSObject {
  @objc public var companionAds: [NaverAdsServices.GFPNASVastCompanionAd]
  @objc public var required: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class GFPVastPricing : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastUniversalAdId : ObjectiveC.NSObject {
  @objc public var value: Swift.String?
  @objc public var idRegistry: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastImpression : ObjectiveC.NSObject {
  @objc public var value: Swift.String?
  @objc public var impressionId: Swift.String?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPVastIconClickFallbackImage : ObjectiveC.NSObject {
  @objc public var altText: Swift.String?
  @objc public var staticResource: NaverAdsServices.GFPVastStaticResource?
  public var width: Swift.Float?
  public var height: Swift.Float?
  @objc deinit
}
extension Swift.String {
  public func encodingSubStringFrom(_ aIndex: Swift.Int) -> Swift.String?
  public func encodingSubStringFrom(_ aIndex: Swift.String.Index) -> Swift.String?
  public func encodingSubStringTo(_ aIndex: Swift.Int) -> Swift.String?
  public func encodingSubStringTo(_ aIndex: Swift.String.Index) -> Swift.String?
  public func isStringNumeric() -> Swift.Bool
}
@objc extension Foundation.NSString {
  @objc dynamic public func encodingSubStringFrom(aIndex: Swift.Int) -> Foundation.NSString?
  @objc dynamic public func encodingSubStringTo(aIndex: Swift.Int) -> Foundation.NSString?
  @objc dynamic public func isStringNumeric() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPStringUtils : ObjectiveC.NSObject {
  @objc(isValidUDID:) public class func isValidUDID(adID: Swift.String?) -> Swift.Bool
  @objc public class func whiteSpaceTrimWith(_ aString: Swift.String?) -> Swift.String?
  @objc public class func whiteSpaceNewLineTrimWith(_ aString: Swift.String?) -> Swift.String?
  @objc public class func hasLengthWhiteSpaceTrimWith(_ aString: Swift.String?) -> Swift.Bool
  @objc(isEmptyWith:) public class func isEmpty(_ aString: Swift.String?) -> Swift.Bool
  @objc public class func encodeByAddingPercentEscapesWith(_ aString: Swift.String?) -> Swift.String?
  @objc public class func queryComponentsWith(_ aString: Swift.String?) -> Swift.Dictionary<Swift.String, Swift.String>?
  @objc public class func isValidTimeFormatString(_ timeString: Swift.String?) -> Swift.Bool
  @objc public class func isValidPercentFormatString(_ percentString: Swift.String?) -> Swift.Bool
  @objc public class func isValidTimeOrPercentFormatString(_ aString: Swift.String?) -> Swift.Bool
  @objc public class func filterJsonStringWith(_ dictionary: Swift.Dictionary<Swift.AnyHashable, Any>?) -> Swift.String
  @objc public class func jsonStringWith(_ dictionary: Swift.Dictionary<Swift.AnyHashable, Any>?) -> Swift.String
  @objc public class func filterHostMetaWith(_ aDict: Swift.Dictionary<Swift.AnyHashable, Any>?) -> Swift.Dictionary<Swift.AnyHashable, Any>
  @objc public class func hasHttpPrefix(_ url: Swift.String?) -> Swift.Bool
  @objc public class func convertWith(_ object: Any?) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class GFPDeviceLocInfo : ObjectiveC.NSObject {
  @objc public var latitude: Swift.String
  @objc public var longitude: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPDeviceUtils : ObjectiveC.NSObject {
  @objc public static var preferredLanguageCode: Swift.String? {
    @objc get
  }
  @objc public static var getDeviceCountryCode: Swift.String? {
    @objc get
  }
  @objc public static var localeIdentifier: Swift.String? {
    @objc get
  }
  @objc public static var isStatusBarLandscape: Swift.Bool {
    @objc get
  }
  @objc public static var isIPad: Swift.Bool {
    @objc get
  }
  @objc public static var systemName: Swift.String {
    @objc get
  }
  @objc public static var systemVer: Swift.String {
    @objc get
  }
  @objc public static var deviceModel: Swift.String {
    @objc get
  }
  @objc public static var screenRect: CoreFoundation.CGRect {
    @objc get
  }
  @objc public static var nativeScaleFactor: CoreFoundation.CGFloat {
    @objc get
  }
  @objc public static var isSKAdNetworkAvaliable: Swift.Bool {
    @objc get
  }
  @objc public static func getLocationInfo() -> NaverAdsServices.GFPDeviceLocInfo?
  @objc override dynamic public init()
  @objc deinit
}
@objc extension Foundation.Timer {
  @objc public static let kAttachedCheckDefaultFrequency: Swift.Double
  @objc dynamic public class func scheduledTimer(timeInterval: Foundation.TimeInterval, block: @escaping () -> Swift.Void, repeats: Swift.Bool) -> Foundation.Timer
  @objc dynamic public class func scheduledTimer(timeInterval: Foundation.TimeInterval, block: @escaping () -> Swift.Void, repeats: Swift.Bool, mode: Foundation.RunLoop.Mode) -> Foundation.Timer
}
public struct GFPWebViewAppEnvSkadn : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GFPWebViewAppEnvDevice : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct GFPWebViewAppEnvironment : Swift.Codable {
  public var sdkName: Swift.String {
    get
  }
  public var sdkVersion: Swift.String {
    get
  }
  public var limitAdTracking: Swift.Bool {
    get
  }
  public var adid: Swift.String? {
    get
  }
  public var nac: Swift.String? {
    get
  }
  public var device: NaverAdsServices.GFPWebViewAppEnvDevice? {
    get
  }
  public var appVersion: Swift.String {
    get
  }
  public var skadn: NaverAdsServices.GFPWebViewAppEnvSkadn? {
    get
  }
  public init(sdkName: Swift.String, sdkVersion: Swift.String, limitAdTracking: Swift.Bool, adId: Swift.String? = nil, nac: Swift.String? = nil, device: NaverAdsServices.GFPWebViewAppEnvDevice? = nil)
  public init?()
  public func jsonString() -> Swift.String?
  public static var nac: Swift.String? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol GFPWebViewAppEnvDelegate {
  @objc var web_env_sdkVersion: Swift.String { get }
  @objc var web_env_sdkName: Swift.String { get }
  @objc var web_env_limitAdTracking: Swift.Bool { get }
  @objc var web_env_adId: Swift.String? { get }
  @objc var web_env_nac: Swift.String? { get }
  @objc func web_env_updateNac(nac: Swift.String?)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GFPWebViewManager : ObjectiveC.NSObject {
  @objc public static let shared: NaverAdsServices.GFPWebViewManager
  @objc weak public var delegate: (any NaverAdsServices.GFPWebViewAppEnvDelegate)? {
    get
  }
  @objc public static func registerDelegate(_ delegate: (any NaverAdsServices.GFPWebViewAppEnvDelegate)?)
  @objc public static func registerWebView(_ webView: WebKit.WKWebView)
  @objc public static func examineWebViewStatus(webView: WebKit.WKWebView, result: @escaping ((any Swift.Error)?, [Swift.String : Any]?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension NaverAdsServices.GFPWebViewManager : WebKit.WKScriptMessageHandlerWithReply {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage, replyHandler: @escaping @_Concurrency.MainActor (Any?, Swift.String?) -> Swift.Void)
}
extension NaverAdsServices.NASVASTMacro : Swift.Equatable {}
extension NaverAdsServices.NASVASTMacro : Swift.Hashable {}
extension NaverAdsServices.NASVASTMacro : Swift.RawRepresentable {}
extension NaverAdsServices.GFPNetworkType : Swift.Equatable {}
extension NaverAdsServices.GFPNetworkType : Swift.Hashable {}
extension NaverAdsServices.GFPNetworkType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPCellularType : Swift.Equatable {}
extension NaverAdsServices.GFPCellularType : Swift.Hashable {}
extension NaverAdsServices.GFPCellularType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPAlignmentCenter : Swift.Equatable {}
extension NaverAdsServices.GFPAlignmentCenter : Swift.Hashable {}
extension NaverAdsServices.GFPAlignmentCenter : Swift.RawRepresentable {}
extension NaverAdsServices.GFPSizeType : Swift.Equatable {}
extension NaverAdsServices.GFPSizeType : Swift.Hashable {}
extension NaverAdsServices.GFPSizeType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPOriginType : Swift.Equatable {}
extension NaverAdsServices.GFPOriginType : Swift.Hashable {}
extension NaverAdsServices.GFPOriginType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPHexCodeType : Swift.Equatable {}
extension NaverAdsServices.GFPHexCodeType : Swift.Hashable {}
extension NaverAdsServices.GFPHexCodeType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPVastIconType : Swift.Equatable {}
extension NaverAdsServices.GFPVastIconType : Swift.Hashable {}
extension NaverAdsServices.GFPVastIconType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPExtensionCreativeType : Swift.Equatable {}
extension NaverAdsServices.GFPExtensionCreativeType : Swift.Hashable {}
extension NaverAdsServices.GFPExtensionCreativeType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPNASLoudnessMode : Swift.Equatable {}
extension NaverAdsServices.GFPNASLoudnessMode : Swift.Hashable {}
extension NaverAdsServices.GFPNASLoudnessMode : Swift.RawRepresentable {}
extension NaverAdsServices.GFPVastRemindType : Swift.Equatable {}
extension NaverAdsServices.GFPVastRemindType : Swift.Hashable {}
extension NaverAdsServices.GFPVastRemindType : Swift.RawRepresentable {}
extension NaverAdsServices.GFPVastResourceCode : Swift.Equatable {}
extension NaverAdsServices.GFPVastResourceCode : Swift.Hashable {}
extension NaverAdsServices.GFPVastResourceCode : Swift.RawRepresentable {}
